using FmgLib.MauiMarkup.Generator.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace FmgLib.MauiMarkup;

[Generator]
public class SourceGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var classToMarkup in ((MauiMarkupSyntaxReceiver)context.SyntaxReceiver.EnsureNotNull()).ClassesToMarkup)
        {
            INamedTypeSymbol generatorTypeSymbol = context.Compilation.GetTypeByMetadataName(classToMarkup).EnsureNotNull();

            var mauiMarkupAttributes = generatorTypeSymbol
            .GetAttributes()
            .Where(_ => _.AttributeClass.EnsureNotNull().Name == "MauiMarkupAttribute" || _.AttributeClass.EnsureNotNull().Name == "MauiMarkup")
            .ToList();

            var mauiMarkupAttachedAttributes = generatorTypeSymbol
            .GetAttributes()
            .Where(_ => _.AttributeClass.EnsureNotNull().Name == "MauiMarkupAttachedPropAttribute" || _.AttributeClass.EnsureNotNull().Name == "MauiMarkupAttachedProp")
            .ToList();

            var classExts = new Dictionary<string, int>();

            foreach (var mauiMarkupAttribute in mauiMarkupAttributes)
            {
                if (mauiMarkupAttribute.ConstructorArguments.Length == 0)
                {
                    throw new InvalidOperationException("Invalid MauiMarkupAttribute arguments");
                }

                var arrayArgument = mauiMarkupAttribute.ConstructorArguments[0];

                if (arrayArgument.Kind != TypedConstantKind.Array)
                {
                    throw new InvalidOperationException("MauiMarkupAttribute argument must be an array");
                }

                foreach (var item in arrayArgument.Values)
                {
                    var typeMetadataName = ((ISymbol)item.Value.EnsureNotNull()).GetFullyQualifiedName();
                    var typeToMauiMarkup = context.Compilation.GetTypeByMetadataName(typeMetadataName).EnsureNotNull();

                    var result = new ExtensionGenerator(context, typeToMauiMarkup).Build();

                    if (result.Item3)
                    {
                        if (classExts.ContainsKey(result.Item1))
                            classExts[result.Item1]++;
                        else
                            classExts[result.Item1] = 0;

                        context.AddSource(result.Item1 + $"{(classExts[result.Item1] == 0 ? "" : classExts[result.Item1].ToString())}.g.cs", result.Item2);
                    }
                }
            }

            classExts = new Dictionary<string, int>();

            foreach (var mauiMarkupAttachedAttribute in mauiMarkupAttachedAttributes)
            {
                if (mauiMarkupAttachedAttribute.ConstructorArguments.Length < 4)
                {
                    throw new InvalidOperationException("Invalid MauiMarkupAttachedPropAttribute arguments");
                }

                AttachedModel attachedModel = new()
                {
                    MainSymbol = context.Compilation.GetTypeByMetadataName(((ISymbol)mauiMarkupAttachedAttribute.ConstructorArguments[0].Value.EnsureNotNull()).GetFullyQualifiedName()).EnsureNotNull(),
                    ReturnTypeName = ((INamedTypeSymbol)mauiMarkupAttachedAttribute.ConstructorArguments[2].Value.EnsureNotNull()).GetFullyQualifiedName(),
                    DeclaringTypeName = ((INamedTypeSymbol)mauiMarkupAttachedAttribute.ConstructorArguments[3].Value.EnsureNotNull()).GetFullyQualifiedName(),
                    PropertyName = mauiMarkupAttachedAttribute.ConstructorArguments[1].Value.ToString().EnsureNotNull()
                };

                var result = new ExtensionGenerator(context, attachedModel).Build();

                if (result.Item3)
                {
                    if (classExts.ContainsKey(result.Item1))
                        classExts[result.Item1]++;
                    else
                        classExts[result.Item1] = 0;

                    context.AddSource(result.Item1 + $"{(classExts[result.Item1] == 0 ? "" : classExts[result.Item1].ToString())}.g.cs", result.Item2);
                }
            }
        }
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization((i) =>
        {
            i.AddSource("MauiMarkupAttribute.g.cs", @"//
// <auto-generated-fmglib-mauimarkup-generator />
//

using System;

namespace FmgLib.MauiMarkup;

[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
internal class MauiMarkupAttribute : Attribute
{
    public MauiMarkupAttribute(params Type[] nativeControlTypes) { }
}

");

            i.AddSource("MauiMarkupAttachedPropAttribute.g.cs", @"//
// <auto-generated-fmglib-mauimarkup-generator />
//

using System;

namespace FmgLib.MauiMarkup;

[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
internal class MauiMarkupAttachedPropAttribute : Attribute
{
    public MauiMarkupAttachedPropAttribute(Type controlType, string propertyName, Type returnType, Type declaringType) { }
}

");
        });

        context.RegisterForSyntaxNotifications(() => new MauiMarkupSyntaxReceiver());
    }
}


class MauiMarkupSyntaxReceiver : ISyntaxReceiver
{
    public List<string> ClassesToMarkup { get; } = new();

    public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
    {
        if (syntaxNode is ClassDeclarationSyntax cds)
        {
            var mauiMarkupAttribute = cds.AttributeLists
            .Where(_ => _.Attributes.Any(attr => attr.Name is IdentifierNameSyntax nameSyntax && (nameSyntax.Identifier.Text == "MauiMarkup" ||
                nameSyntax.Identifier.Text == "MauiMarkupAttribute" || nameSyntax.Identifier.Text == "MauiMarkupAttachedProp" ||
                nameSyntax.Identifier.Text == "MauiMarkupAttachedPropAttribute")))
            .Select(_ => _.Attributes.First())
            .FirstOrDefault();

            if (mauiMarkupAttribute != null)
            {
                ClassesToMarkup.Add(cds.GetFullyQualifiedName().EnsureNotNull());
            }
        }
    }
}
