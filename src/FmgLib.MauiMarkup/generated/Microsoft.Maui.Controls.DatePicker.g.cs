//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class DatePickerExtension
{
    public static T CharacterSpacing<T>(this T self,
        double characterSpacing)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, characterSpacing);
        return self;
    }
    
    public static T CharacterSpacing<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self,
        double characterSpacing)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, Value = characterSpacing });
        return self;
    }
    
    public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        double fromValue = self.CharacterSpacing;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.DatePicker.CharacterSpacingProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
    }
    
    public static T Date<T>(this T self,
        System.DateTime date)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.DateProperty, date);
        return self;
    }
    
    public static T Date<T>(this T self, Func<PropertyContext<T, System.DateTime>, IPropertyBuilder<T, System.DateTime>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, System.DateTime>(self, Microsoft.Maui.Controls.DatePicker.DateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Date<T>(this SettersContext<T> self,
        System.DateTime date)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.DateProperty, Value = date });
        return self;
    }
    
    public static SettersContext<T> Date<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.DateTime>, IPropertySettersBuilder<T, System.DateTime>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, System.DateTime>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.DateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontAttributes<T>(this T self,
        Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, fontAttributes);
        return self;
    }
    
    public static T FontAttributes<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.FontAttributes>, IPropertyBuilder<T, Microsoft.Maui.Controls.FontAttributes>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.FontAttributes>(self, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontAttributes<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.FontAttributesProperty, Value = fontAttributes });
        return self;
    }
    
    public static SettersContext<T> FontAttributes<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.FontAttributes>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.FontAttributes>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.FontAttributes>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.FontAttributesProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontAutoScalingEnabled<T>(this T self,
        bool fontAutoScalingEnabled)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return self;
    }
    
    public static T FontAutoScalingEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontAutoScalingEnabled<T>(this SettersContext<T> self,
        bool fontAutoScalingEnabled)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty, Value = fontAutoScalingEnabled });
        return self;
    }
    
    public static SettersContext<T> FontAutoScalingEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.FontAutoScalingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontFamily<T>(this T self,
        string fontFamily)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, fontFamily);
        return self;
    }
    
    public static T FontFamily<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontFamily<T>(this SettersContext<T> self,
        string fontFamily)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.FontFamilyProperty, Value = fontFamily });
        return self;
    }
    
    public static SettersContext<T> FontFamily<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.FontFamilyProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontSize<T>(this T self,
        double fontSize)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, fontSize);
        return self;
    }
    
    public static T FontSize<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.DatePicker.FontSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontSize<T>(this SettersContext<T> self,
        double fontSize)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.FontSizeProperty, Value = fontSize });
        return self;
    }
    
    public static SettersContext<T> FontSize<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.FontSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateFontSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        double fromValue = self.FontSize;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.DatePicker.FontSizeProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateFontSizeTo", transform, callback, length, easing);
    }
    
    public static T Format<T>(this T self,
        string format)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.FormatProperty, format);
        return self;
    }
    
    public static T Format<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.DatePicker.FormatProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Format<T>(this SettersContext<T> self,
        string format)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.FormatProperty, Value = format });
        return self;
    }
    
    public static SettersContext<T> Format<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.FormatProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MaximumDate<T>(this T self,
        System.DateTime maximumDate)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, maximumDate);
        return self;
    }
    
    public static T MaximumDate<T>(this T self, Func<PropertyContext<T, System.DateTime>, IPropertyBuilder<T, System.DateTime>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, System.DateTime>(self, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaximumDate<T>(this SettersContext<T> self,
        System.DateTime maximumDate)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.MaximumDateProperty, Value = maximumDate });
        return self;
    }
    
    public static SettersContext<T> MaximumDate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.DateTime>, IPropertySettersBuilder<T, System.DateTime>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, System.DateTime>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.MaximumDateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MinimumDate<T>(this T self,
        System.DateTime minimumDate)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, minimumDate);
        return self;
    }
    
    public static T MinimumDate<T>(this T self, Func<PropertyContext<T, System.DateTime>, IPropertyBuilder<T, System.DateTime>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, System.DateTime>(self, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MinimumDate<T>(this SettersContext<T> self,
        System.DateTime minimumDate)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.MinimumDateProperty, Value = minimumDate });
        return self;
    }
    
    public static SettersContext<T> MinimumDate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.DateTime>, IPropertySettersBuilder<T, System.DateTime>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, System.DateTime>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.MinimumDateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T TextColor<T>(this T self,
        Microsoft.Maui.Graphics.Color textColor)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.SetValue(Microsoft.Maui.Controls.DatePicker.TextColorProperty, textColor);
        return self;
    }
    
    public static T TextColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.DatePicker.TextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TextColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color textColor)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.DatePicker.TextColorProperty, Value = textColor });
        return self;
    }
    
    public static SettersContext<T> TextColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.DatePicker.TextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.DatePicker.TextColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
    }
    
    public static T OnDateSelected<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.DateChangedEventArgs> handler)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.DateSelected += handler;
        return self;
    }
    
    public static T OnDateSelected<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.DatePicker
    {
        self.DateSelected += (o, arg) => action(self);
        return self;
    }
        
}


