//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class FlyoutPageExtension
{
    public static T Detail<T>(this T self,
        Microsoft.Maui.Controls.Page detail)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.Detail = detail;
        return self;
    }
    
    public static T Flyout<T>(this T self,
        Microsoft.Maui.Controls.Page flyout)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.Flyout = flyout;
        return self;
    }
    
    public static T FlyoutLayoutBehavior<T>(this T self,
        Microsoft.Maui.Controls.FlyoutLayoutBehavior flyoutLayoutBehavior)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.SetValue(Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty, flyoutLayoutBehavior);
        return self;
    }
    
    public static T FlyoutLayoutBehavior<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.FlyoutLayoutBehavior>, IPropertyBuilder<T, Microsoft.Maui.Controls.FlyoutLayoutBehavior>> configure)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.FlyoutLayoutBehavior>(self, Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FlyoutLayoutBehavior<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.FlyoutLayoutBehavior flyoutLayoutBehavior)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty, Value = flyoutLayoutBehavior });
        return self;
    }
    
    public static SettersContext<T> FlyoutLayoutBehavior<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.FlyoutLayoutBehavior>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.FlyoutLayoutBehavior>> configure)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.FlyoutLayoutBehavior>(self.XamlSetters, Microsoft.Maui.Controls.FlyoutPage.FlyoutLayoutBehaviorProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsGestureEnabled<T>(this T self,
        bool isGestureEnabled)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.SetValue(Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty, isGestureEnabled);
        return self;
    }
    
    public static T IsGestureEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsGestureEnabled<T>(this SettersContext<T> self,
        bool isGestureEnabled)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty, Value = isGestureEnabled });
        return self;
    }
    
    public static SettersContext<T> IsGestureEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.FlyoutPage.IsGestureEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsPresented<T>(this T self,
        bool isPresented)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.SetValue(Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty, isPresented);
        return self;
    }
    
    public static T IsPresented<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsPresented<T>(this SettersContext<T> self,
        bool isPresented)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty, Value = isPresented });
        return self;
    }
    
    public static SettersContext<T> IsPresented<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.FlyoutPage.IsPresentedProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnIsPresentedChanged<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.IsPresentedChanged += handler;
        return self;
    }
    
    public static T OnIsPresentedChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.FlyoutPage
    {
        self.IsPresentedChanged += (o, arg) => action(self);
        return self;
    }
        
}


