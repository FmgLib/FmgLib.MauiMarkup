//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class FrameExtension
{
    public static T BorderColor<T>(this T self,
        Microsoft.Maui.Graphics.Color borderColor)
        where T : Microsoft.Maui.Controls.Frame
    {
        self.SetValue(Microsoft.Maui.Controls.Frame.BorderColorProperty, borderColor);
        return self;
    }
    
    public static T BorderColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.Frame
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.Frame.BorderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BorderColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color borderColor)
        where T : Microsoft.Maui.Controls.Frame
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Frame.BorderColorProperty, Value = borderColor });
        return self;
    }
    
    public static SettersContext<T> BorderColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.Frame
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.Frame.BorderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBorderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.Frame
    {
        Microsoft.Maui.Graphics.Color fromValue = self.BorderColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.Frame.BorderColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBorderColorTo", transform, callback, length, easing);
    }
    
    public static T CornerRadius<T>(this T self,
        float cornerRadius)
        where T : Microsoft.Maui.Controls.Frame
    {
        self.SetValue(Microsoft.Maui.Controls.Frame.CornerRadiusProperty, cornerRadius);
        return self;
    }
    
    public static T CornerRadius<T>(this T self, Func<PropertyContext<T, float>, IPropertyBuilder<T, float>> configure)
        where T : Microsoft.Maui.Controls.Frame
    {
        var context = new PropertyContext<T, float>(self, Microsoft.Maui.Controls.Frame.CornerRadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CornerRadius<T>(this SettersContext<T> self,
        float cornerRadius)
        where T : Microsoft.Maui.Controls.Frame
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Frame.CornerRadiusProperty, Value = cornerRadius });
        return self;
    }
    
    public static SettersContext<T> CornerRadius<T>(this SettersContext<T> self, Func<PropertySettersContext<T, float>, IPropertySettersBuilder<T, float>> configure)
        where T : Microsoft.Maui.Controls.Frame
    {
        var context = new PropertySettersContext<T, float>(self.XamlSetters, Microsoft.Maui.Controls.Frame.CornerRadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static T HasShadow<T>(this T self,
        bool hasShadow)
        where T : Microsoft.Maui.Controls.Frame
    {
        self.SetValue(Microsoft.Maui.Controls.Frame.HasShadowProperty, hasShadow);
        return self;
    }
    
    public static T HasShadow<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Frame
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.Frame.HasShadowProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HasShadow<T>(this SettersContext<T> self,
        bool hasShadow)
        where T : Microsoft.Maui.Controls.Frame
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Frame.HasShadowProperty, Value = hasShadow });
        return self;
    }
    
    public static SettersContext<T> HasShadow<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Frame
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.Frame.HasShadowProperty);
        configure(context).Build();
        return self;
    }
    
}


