//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class HybridWebViewExtension
{
    public static T DefaultFile<T>(this T self,
        string? defaultFile)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        self.SetValue(Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty, defaultFile);
        return self;
    }
    
    public static T DefaultFile<T>(this T self, Func<PropertyContext<T, string?>, IPropertyBuilder<T, string?>> configure)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        var context = new PropertyContext<T, string?>(self, Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> DefaultFile<T>(this SettersContext<T> self,
        string? defaultFile)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty, Value = defaultFile });
        return self;
    }
    
    public static SettersContext<T> DefaultFile<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string?>, IPropertySettersBuilder<T, string?>> configure)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        var context = new PropertySettersContext<T, string?>(self.XamlSetters, Microsoft.Maui.Controls.HybridWebView.DefaultFileProperty);
        configure(context).Build();
        return self;
    }
    
    public static T HybridRoot<T>(this T self,
        string? hybridRoot)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        self.SetValue(Microsoft.Maui.Controls.HybridWebView.HybridRootProperty, hybridRoot);
        return self;
    }
    
    public static T HybridRoot<T>(this T self, Func<PropertyContext<T, string?>, IPropertyBuilder<T, string?>> configure)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        var context = new PropertyContext<T, string?>(self, Microsoft.Maui.Controls.HybridWebView.HybridRootProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HybridRoot<T>(this SettersContext<T> self,
        string? hybridRoot)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.HybridWebView.HybridRootProperty, Value = hybridRoot });
        return self;
    }
    
    public static SettersContext<T> HybridRoot<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string?>, IPropertySettersBuilder<T, string?>> configure)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        var context = new PropertySettersContext<T, string?>(self.XamlSetters, Microsoft.Maui.Controls.HybridWebView.HybridRootProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnRawMessageReceived<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.HybridWebViewRawMessageReceivedEventArgs>? handler)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        self.RawMessageReceived += handler;
        return self;
    }
    
    public static T OnRawMessageReceived<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.HybridWebView
    {
        self.RawMessageReceived += (o, arg) => action(self);
        return self;
    }
        
}


