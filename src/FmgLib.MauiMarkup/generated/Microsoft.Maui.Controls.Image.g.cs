//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ImageExtension
{
    public static T Aspect<T>(this T self,
        Microsoft.Maui.Aspect aspect)
        where T : Microsoft.Maui.Controls.Image
    {
        self.SetValue(Microsoft.Maui.Controls.Image.AspectProperty, aspect);
        return self;
    }
    
    public static T Aspect<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Aspect>, IPropertyBuilder<T, Microsoft.Maui.Aspect>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertyContext<T, Microsoft.Maui.Aspect>(self, Microsoft.Maui.Controls.Image.AspectProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Aspect<T>(this SettersContext<T> self,
        Microsoft.Maui.Aspect aspect)
        where T : Microsoft.Maui.Controls.Image
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Image.AspectProperty, Value = aspect });
        return self;
    }
    
    public static SettersContext<T> Aspect<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Aspect>, IPropertySettersBuilder<T, Microsoft.Maui.Aspect>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Aspect>(self.XamlSetters, Microsoft.Maui.Controls.Image.AspectProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsAnimationPlaying<T>(this T self,
        bool isAnimationPlaying)
        where T : Microsoft.Maui.Controls.Image
    {
        self.SetValue(Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty, isAnimationPlaying);
        return self;
    }
    
    public static T IsAnimationPlaying<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsAnimationPlaying<T>(this SettersContext<T> self,
        bool isAnimationPlaying)
        where T : Microsoft.Maui.Controls.Image
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty, Value = isAnimationPlaying });
        return self;
    }
    
    public static SettersContext<T> IsAnimationPlaying<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.Image.IsAnimationPlayingProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsLoading<T>(this T self,
        bool isLoading)
        where T : Microsoft.Maui.Controls.Image
    {
        self.SetValue(Microsoft.Maui.Controls.Image.IsLoadingProperty, isLoading);
        return self;
    }
    
    public static T IsLoading<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.Image.IsLoadingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsLoading<T>(this SettersContext<T> self,
        bool isLoading)
        where T : Microsoft.Maui.Controls.Image
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Image.IsLoadingProperty, Value = isLoading });
        return self;
    }
    
    public static SettersContext<T> IsLoading<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.Image.IsLoadingProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsOpaque<T>(this T self,
        bool isOpaque)
        where T : Microsoft.Maui.Controls.Image
    {
        self.SetValue(Microsoft.Maui.Controls.Image.IsOpaqueProperty, isOpaque);
        return self;
    }
    
    public static T IsOpaque<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.Image.IsOpaqueProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsOpaque<T>(this SettersContext<T> self,
        bool isOpaque)
        where T : Microsoft.Maui.Controls.Image
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Image.IsOpaqueProperty, Value = isOpaque });
        return self;
    }
    
    public static SettersContext<T> IsOpaque<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.Image.IsOpaqueProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Source<T>(this T self,
        Microsoft.Maui.Controls.ImageSource source)
        where T : Microsoft.Maui.Controls.Image
    {
        self.SetValue(Microsoft.Maui.Controls.Image.SourceProperty, source);
        return self;
    }
    
    public static T Source<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.ImageSource>, IPropertyBuilder<T, Microsoft.Maui.Controls.ImageSource>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.Image.SourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Source<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.ImageSource source)
        where T : Microsoft.Maui.Controls.Image
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Image.SourceProperty, Value = source });
        return self;
    }
    
    public static SettersContext<T> Source<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.ImageSource>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.ImageSource>> configure)
        where T : Microsoft.Maui.Controls.Image
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.ImageSource>(self.XamlSetters, Microsoft.Maui.Controls.Image.SourceProperty);
        configure(context).Build();
        return self;
    }
    
}


