//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ImageButtonExtension
{
    public static T Aspect<T>(this T self,
        Microsoft.Maui.Aspect aspect)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.AspectProperty, aspect);
        return self;
    }
    
    public static T Aspect<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Aspect>, IPropertyBuilder<T, Microsoft.Maui.Aspect>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Aspect>(self, Microsoft.Maui.Controls.ImageButton.AspectProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Aspect<T>(this SettersContext<T> self,
        Microsoft.Maui.Aspect aspect)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.AspectProperty, Value = aspect });
        return self;
    }
    
    public static SettersContext<T> Aspect<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Aspect>, IPropertySettersBuilder<T, Microsoft.Maui.Aspect>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Aspect>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.AspectProperty);
        configure(context).Build();
        return self;
    }
    
    public static T BorderColor<T>(this T self,
        Microsoft.Maui.Graphics.Color borderColor)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.BorderColorProperty, borderColor);
        return self;
    }
    
    public static T BorderColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ImageButton.BorderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BorderColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color borderColor)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.BorderColorProperty, Value = borderColor });
        return self;
    }
    
    public static SettersContext<T> BorderColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.BorderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBorderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        Microsoft.Maui.Graphics.Color fromValue = self.BorderColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.ImageButton.BorderColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBorderColorTo", transform, callback, length, easing);
    }
    
    public static T BorderWidth<T>(this T self,
        double borderWidth)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.BorderWidthProperty, borderWidth);
        return self;
    }
    
    public static T BorderWidth<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.ImageButton.BorderWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BorderWidth<T>(this SettersContext<T> self,
        double borderWidth)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.BorderWidthProperty, Value = borderWidth });
        return self;
    }
    
    public static SettersContext<T> BorderWidth<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.BorderWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBorderWidthTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        double fromValue = self.BorderWidth;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.ImageButton.BorderWidthProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateBorderWidthTo", transform, callback, length, easing);
    }
    
    public static T Command<T>(this T self,
        System.Windows.Input.ICommand command)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.CommandProperty, command);
        return self;
    }
    
    public static T Command<T>(this T self, Func<PropertyContext<T, System.Windows.Input.ICommand>, IPropertyBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.ImageButton.CommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Command<T>(this SettersContext<T> self,
        System.Windows.Input.ICommand command)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.CommandProperty, Value = command });
        return self;
    }
    
    public static SettersContext<T> Command<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Windows.Input.ICommand>, IPropertySettersBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.CommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static T CommandParameter<T>(this T self,
        object commandParameter)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.CommandParameterProperty, commandParameter);
        return self;
    }
    
    public static T CommandParameter<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.ImageButton.CommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CommandParameter<T>(this SettersContext<T> self,
        object commandParameter)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.CommandParameterProperty, Value = commandParameter });
        return self;
    }
    
    public static SettersContext<T> CommandParameter<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.CommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static T CornerRadius<T>(this T self,
        int cornerRadius)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.CornerRadiusProperty, cornerRadius);
        return self;
    }
    
    public static T CornerRadius<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.ImageButton.CornerRadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CornerRadius<T>(this SettersContext<T> self,
        int cornerRadius)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.CornerRadiusProperty, Value = cornerRadius });
        return self;
    }
    
    public static SettersContext<T> CornerRadius<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.CornerRadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsLoading<T>(this T self,
        bool isLoading)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.IsLoadingProperty, isLoading);
        return self;
    }
    
    public static T IsLoading<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ImageButton.IsLoadingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsLoading<T>(this SettersContext<T> self,
        bool isLoading)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.IsLoadingProperty, Value = isLoading });
        return self;
    }
    
    public static SettersContext<T> IsLoading<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.IsLoadingProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsOpaque<T>(this T self,
        bool isOpaque)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.IsOpaqueProperty, isOpaque);
        return self;
    }
    
    public static T IsOpaque<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ImageButton.IsOpaqueProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsOpaque<T>(this SettersContext<T> self,
        bool isOpaque)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.IsOpaqueProperty, Value = isOpaque });
        return self;
    }
    
    public static SettersContext<T> IsOpaque<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.IsOpaqueProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsPressed<T>(this T self,
        bool isPressed)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.IsPressedProperty, isPressed);
        return self;
    }
    
    public static T IsPressed<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ImageButton.IsPressedProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsPressed<T>(this SettersContext<T> self,
        bool isPressed)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.IsPressedProperty, Value = isPressed });
        return self;
    }
    
    public static SettersContext<T> IsPressed<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.IsPressedProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Padding<T>(this T self,
        Microsoft.Maui.Thickness padding)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.PaddingProperty, padding);
        return self;
    }
    
    public static T Padding<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Thickness>, IPropertyBuilder<T, Microsoft.Maui.Thickness>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Thickness>(self, Microsoft.Maui.Controls.ImageButton.PaddingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Padding<T>(this SettersContext<T> self,
        Microsoft.Maui.Thickness padding)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.PaddingProperty, Value = padding });
        return self;
    }
    
    public static SettersContext<T> Padding<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Thickness>, IPropertySettersBuilder<T, Microsoft.Maui.Thickness>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Thickness>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.PaddingProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Source<T>(this T self,
        Microsoft.Maui.Controls.ImageSource source)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.SetValue(Microsoft.Maui.Controls.ImageButton.SourceProperty, source);
        return self;
    }
    
    public static T Source<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.ImageSource>, IPropertyBuilder<T, Microsoft.Maui.Controls.ImageSource>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.ImageButton.SourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Source<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.ImageSource source)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ImageButton.SourceProperty, Value = source });
        return self;
    }
    
    public static SettersContext<T> Source<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.ImageSource>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.ImageSource>> configure)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.ImageSource>(self.XamlSetters, Microsoft.Maui.Controls.ImageButton.SourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnClicked<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.Clicked += handler;
        return self;
    }
    
    public static T OnClicked<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.Clicked += (o, arg) => action(self);
        return self;
    }
        
    public static T OnPressed<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.Pressed += handler;
        return self;
    }
    
    public static T OnPressed<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.Pressed += (o, arg) => action(self);
        return self;
    }
        
    public static T OnReleased<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.Released += handler;
        return self;
    }
    
    public static T OnReleased<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ImageButton
    {
        self.Released += (o, arg) => action(self);
        return self;
    }
        
}


