//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class IndicatorViewExtension
{
    public static T Count<T>(this T self,
        int count)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.CountProperty, count);
        return self;
    }
    
    public static T Count<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.IndicatorView.CountProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Count<T>(this SettersContext<T> self,
        int count)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.CountProperty, Value = count });
        return self;
    }
    
    public static SettersContext<T> Count<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.CountProperty);
        configure(context).Build();
        return self;
    }
    
    public static T HideSingle<T>(this T self,
        bool hideSingle)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, hideSingle);
        return self;
    }
    
    public static T HideSingle<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.IndicatorView.HideSingleProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HideSingle<T>(this SettersContext<T> self,
        bool hideSingle)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.HideSingleProperty, Value = hideSingle });
        return self;
    }
    
    public static SettersContext<T> HideSingle<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.HideSingleProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IndicatorColor<T>(this T self,
        Microsoft.Maui.Graphics.Color indicatorColor)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, indicatorColor);
        return self;
    }
    
    public static T IndicatorColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IndicatorColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color indicatorColor)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, Value = indicatorColor });
        return self;
    }
    
    public static SettersContext<T> IndicatorColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateIndicatorColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        Microsoft.Maui.Graphics.Color fromValue = self.IndicatorColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateIndicatorColorTo", transform, callback, length, easing);
    }
    
    public static T IndicatorLayout<T>(this T self,
        Microsoft.Maui.Controls.IBindableLayout indicatorLayout)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.IndicatorLayout = indicatorLayout;
        return self;
    }
    
    public static T IndicatorSize<T>(this T self,
        double indicatorSize)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, indicatorSize);
        return self;
    }
    
    public static T IndicatorSize<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IndicatorSize<T>(this SettersContext<T> self,
        double indicatorSize)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, Value = indicatorSize });
        return self;
    }
    
    public static SettersContext<T> IndicatorSize<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateIndicatorSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        double fromValue = self.IndicatorSize;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorSizeProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateIndicatorSizeTo", transform, callback, length, easing);
    }
    
    public static T IndicatorsShape<T>(this T self,
        Microsoft.Maui.Controls.IndicatorShape indicatorsShape)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, indicatorsShape);
        return self;
    }
    
    public static T IndicatorsShape<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.IndicatorShape>, IPropertyBuilder<T, Microsoft.Maui.Controls.IndicatorShape>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.IndicatorShape>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IndicatorsShape<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.IndicatorShape indicatorsShape)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty, Value = indicatorsShape });
        return self;
    }
    
    public static SettersContext<T> IndicatorsShape<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.IndicatorShape>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.IndicatorShape>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.IndicatorShape>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.IndicatorsShapeProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IndicatorTemplate<T>(this T self,
        Microsoft.Maui.Controls.DataTemplate indicatorTemplate)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty, indicatorTemplate);
        return self;
    }
    
    public static T IndicatorTemplate<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IndicatorTemplate<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.DataTemplate indicatorTemplate)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty, Value = indicatorTemplate });
        return self;
    }
    
    public static SettersContext<T> IndicatorTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IndicatorTemplate<T>(this T self, System.Func<object> loadTemplate)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.IndicatorTemplateProperty, new DataTemplate(loadTemplate));
        return self;
    }
    
    public static T ItemsSource<T>(this T self,
        System.Collections.IEnumerable itemsSource)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty, itemsSource);
        return self;
    }
    
    public static T ItemsSource<T>(this T self, Func<PropertyContext<T, System.Collections.IEnumerable>, IPropertyBuilder<T, System.Collections.IEnumerable>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, System.Collections.IEnumerable>(self, Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ItemsSource<T>(this SettersContext<T> self,
        System.Collections.IEnumerable itemsSource)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty, Value = itemsSource });
        return self;
    }
    
    public static SettersContext<T> ItemsSource<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Collections.IEnumerable>, IPropertySettersBuilder<T, System.Collections.IEnumerable>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, System.Collections.IEnumerable>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.ItemsSourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MaximumVisible<T>(this T self,
        int maximumVisible)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, maximumVisible);
        return self;
    }
    
    public static T MaximumVisible<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaximumVisible<T>(this SettersContext<T> self,
        int maximumVisible)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty, Value = maximumVisible });
        return self;
    }
    
    public static SettersContext<T> MaximumVisible<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.MaximumVisibleProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Position<T>(this T self,
        int position)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.PositionProperty, position);
        return self;
    }
    
    public static T Position<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.IndicatorView.PositionProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Position<T>(this SettersContext<T> self,
        int position)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.PositionProperty, Value = position });
        return self;
    }
    
    public static SettersContext<T> Position<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.PositionProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectedIndicatorColor<T>(this T self,
        Microsoft.Maui.Graphics.Color selectedIndicatorColor)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.SetValue(Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, selectedIndicatorColor);
        return self;
    }
    
    public static T SelectedIndicatorColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectedIndicatorColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color selectedIndicatorColor)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, Value = selectedIndicatorColor });
        return self;
    }
    
    public static SettersContext<T> SelectedIndicatorColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateSelectedIndicatorColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.IndicatorView
    {
        Microsoft.Maui.Graphics.Color fromValue = self.SelectedIndicatorColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.IndicatorView.SelectedIndicatorColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateSelectedIndicatorColorTo", transform, callback, length, easing);
    }
    
}


