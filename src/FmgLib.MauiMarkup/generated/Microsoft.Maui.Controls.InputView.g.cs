//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class InputViewExtension
{
    public static T CharacterSpacing<T>(this T self,
        double characterSpacing)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, characterSpacing);
        return self;
    }
    
    public static T CharacterSpacing<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self,
        double characterSpacing)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, Value = characterSpacing });
        return self;
    }
    
    public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.InputView.CharacterSpacingProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.InputView
    {
        double fromValue = self.CharacterSpacing;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.InputView.CharacterSpacingProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
    }
    
    public static T CursorPosition<T>(this T self,
        int cursorPosition)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.CursorPositionProperty, cursorPosition);
        return self;
    }
    
    public static T CursorPosition<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.InputView.CursorPositionProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CursorPosition<T>(this SettersContext<T> self,
        int cursorPosition)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.CursorPositionProperty, Value = cursorPosition });
        return self;
    }
    
    public static SettersContext<T> CursorPosition<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.InputView.CursorPositionProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontAttributes<T>(this T self,
        Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.FontAttributesProperty, fontAttributes);
        return self;
    }
    
    public static T FontAttributes<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.FontAttributes>, IPropertyBuilder<T, Microsoft.Maui.Controls.FontAttributes>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.FontAttributes>(self, Microsoft.Maui.Controls.InputView.FontAttributesProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontAttributes<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.FontAttributesProperty, Value = fontAttributes });
        return self;
    }
    
    public static SettersContext<T> FontAttributes<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.FontAttributes>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.FontAttributes>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.FontAttributes>(self.XamlSetters, Microsoft.Maui.Controls.InputView.FontAttributesProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontAutoScalingEnabled<T>(this T self,
        bool fontAutoScalingEnabled)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return self;
    }
    
    public static T FontAutoScalingEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.InputView.FontAutoScalingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontAutoScalingEnabled<T>(this SettersContext<T> self,
        bool fontAutoScalingEnabled)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.FontAutoScalingEnabledProperty, Value = fontAutoScalingEnabled });
        return self;
    }
    
    public static SettersContext<T> FontAutoScalingEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.InputView.FontAutoScalingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontFamily<T>(this T self,
        string fontFamily)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.FontFamilyProperty, fontFamily);
        return self;
    }
    
    public static T FontFamily<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.InputView.FontFamilyProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontFamily<T>(this SettersContext<T> self,
        string fontFamily)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.FontFamilyProperty, Value = fontFamily });
        return self;
    }
    
    public static SettersContext<T> FontFamily<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.InputView.FontFamilyProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontSize<T>(this T self,
        double fontSize)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.FontSizeProperty, fontSize);
        return self;
    }
    
    public static T FontSize<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.InputView.FontSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontSize<T>(this SettersContext<T> self,
        double fontSize)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.FontSizeProperty, Value = fontSize });
        return self;
    }
    
    public static SettersContext<T> FontSize<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.InputView.FontSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateFontSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.InputView
    {
        double fromValue = self.FontSize;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.InputView.FontSizeProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateFontSizeTo", transform, callback, length, easing);
    }
    
    public static T IsReadOnly<T>(this T self,
        bool isReadOnly)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.IsReadOnlyProperty, isReadOnly);
        return self;
    }
    
    public static T IsReadOnly<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsReadOnly<T>(this SettersContext<T> self,
        bool isReadOnly)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.IsReadOnlyProperty, Value = isReadOnly });
        return self;
    }
    
    public static SettersContext<T> IsReadOnly<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.InputView.IsReadOnlyProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsSpellCheckEnabled<T>(this T self,
        bool isSpellCheckEnabled)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty, isSpellCheckEnabled);
        return self;
    }
    
    public static T IsSpellCheckEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsSpellCheckEnabled<T>(this SettersContext<T> self,
        bool isSpellCheckEnabled)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty, Value = isSpellCheckEnabled });
        return self;
    }
    
    public static SettersContext<T> IsSpellCheckEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.InputView.IsSpellCheckEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsTextPredictionEnabled<T>(this T self,
        bool isTextPredictionEnabled)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.IsTextPredictionEnabledProperty, isTextPredictionEnabled);
        return self;
    }
    
    public static T IsTextPredictionEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.InputView.IsTextPredictionEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsTextPredictionEnabled<T>(this SettersContext<T> self,
        bool isTextPredictionEnabled)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.IsTextPredictionEnabledProperty, Value = isTextPredictionEnabled });
        return self;
    }
    
    public static SettersContext<T> IsTextPredictionEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.InputView.IsTextPredictionEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Keyboard<T>(this T self,
        Microsoft.Maui.Keyboard keyboard)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.KeyboardProperty, keyboard);
        return self;
    }
    
    public static T Keyboard<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Keyboard>, IPropertyBuilder<T, Microsoft.Maui.Keyboard>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Keyboard>(self, Microsoft.Maui.Controls.InputView.KeyboardProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Keyboard<T>(this SettersContext<T> self,
        Microsoft.Maui.Keyboard keyboard)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.KeyboardProperty, Value = keyboard });
        return self;
    }
    
    public static SettersContext<T> Keyboard<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Keyboard>, IPropertySettersBuilder<T, Microsoft.Maui.Keyboard>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Keyboard>(self.XamlSetters, Microsoft.Maui.Controls.InputView.KeyboardProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MaxLength<T>(this T self,
        int maxLength)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.MaxLengthProperty, maxLength);
        return self;
    }
    
    public static T MaxLength<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.InputView.MaxLengthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaxLength<T>(this SettersContext<T> self,
        int maxLength)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.MaxLengthProperty, Value = maxLength });
        return self;
    }
    
    public static SettersContext<T> MaxLength<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.InputView.MaxLengthProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Placeholder<T>(this T self,
        string placeholder)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.PlaceholderProperty, placeholder);
        return self;
    }
    
    public static T Placeholder<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.InputView.PlaceholderProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Placeholder<T>(this SettersContext<T> self,
        string placeholder)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.PlaceholderProperty, Value = placeholder });
        return self;
    }
    
    public static SettersContext<T> Placeholder<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.InputView.PlaceholderProperty);
        configure(context).Build();
        return self;
    }
    
    public static T PlaceholderColor<T>(this T self,
        Microsoft.Maui.Graphics.Color placeholderColor)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, placeholderColor);
        return self;
    }
    
    public static T PlaceholderColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> PlaceholderColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color placeholderColor)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, Value = placeholderColor });
        return self;
    }
    
    public static SettersContext<T> PlaceholderColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.InputView.PlaceholderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimatePlaceholderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.InputView
    {
        Microsoft.Maui.Graphics.Color fromValue = self.PlaceholderColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.InputView.PlaceholderColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimatePlaceholderColorTo", transform, callback, length, easing);
    }
    
    public static T SelectionLength<T>(this T self,
        int selectionLength)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.SelectionLengthProperty, selectionLength);
        return self;
    }
    
    public static T SelectionLength<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.InputView.SelectionLengthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectionLength<T>(this SettersContext<T> self,
        int selectionLength)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.SelectionLengthProperty, Value = selectionLength });
        return self;
    }
    
    public static SettersContext<T> SelectionLength<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.InputView.SelectionLengthProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Text<T>(this T self,
        string text)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.TextProperty, text);
        return self;
    }
    
    public static T Text<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.InputView.TextProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Text<T>(this SettersContext<T> self,
        string text)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.TextProperty, Value = text });
        return self;
    }
    
    public static SettersContext<T> Text<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.InputView.TextProperty);
        configure(context).Build();
        return self;
    }
    
    public static T TextColor<T>(this T self,
        Microsoft.Maui.Graphics.Color textColor)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.TextColorProperty, textColor);
        return self;
    }
    
    public static T TextColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.InputView.TextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TextColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color textColor)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.TextColorProperty, Value = textColor });
        return self;
    }
    
    public static SettersContext<T> TextColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.InputView.TextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.InputView
    {
        Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.InputView.TextColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
    }
    
    public static T TextTransform<T>(this T self,
        Microsoft.Maui.TextTransform textTransform)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.SetValue(Microsoft.Maui.Controls.InputView.TextTransformProperty, textTransform);
        return self;
    }
    
    public static T TextTransform<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.TextTransform>, IPropertyBuilder<T, Microsoft.Maui.TextTransform>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertyContext<T, Microsoft.Maui.TextTransform>(self, Microsoft.Maui.Controls.InputView.TextTransformProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TextTransform<T>(this SettersContext<T> self,
        Microsoft.Maui.TextTransform textTransform)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.InputView.TextTransformProperty, Value = textTransform });
        return self;
    }
    
    public static SettersContext<T> TextTransform<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.TextTransform>, IPropertySettersBuilder<T, Microsoft.Maui.TextTransform>> configure)
        where T : Microsoft.Maui.Controls.InputView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.TextTransform>(self.XamlSetters, Microsoft.Maui.Controls.InputView.TextTransformProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnTextChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.TextChangedEventArgs> handler)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.TextChanged += handler;
        return self;
    }
    
    public static T OnTextChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.InputView
    {
        self.TextChanged += (o, arg) => action(self);
        return self;
    }
        
}


