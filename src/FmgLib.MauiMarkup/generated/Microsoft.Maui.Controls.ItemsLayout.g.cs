//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ItemsLayoutExtension
{
    public static T SnapPointsAlignment<T>(this T self,
        Microsoft.Maui.Controls.SnapPointsAlignment snapPointsAlignment)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsLayout.SnapPointsAlignmentProperty, snapPointsAlignment);
        return self;
    }
    
    public static T SnapPointsAlignment<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SnapPointsAlignment>, IPropertyBuilder<T, Microsoft.Maui.Controls.SnapPointsAlignment>> configure)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SnapPointsAlignment>(self, Microsoft.Maui.Controls.ItemsLayout.SnapPointsAlignmentProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SnapPointsAlignment<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SnapPointsAlignment snapPointsAlignment)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsLayout.SnapPointsAlignmentProperty, Value = snapPointsAlignment });
        return self;
    }
    
    public static SettersContext<T> SnapPointsAlignment<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SnapPointsAlignment>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SnapPointsAlignment>> configure)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SnapPointsAlignment>(self.XamlSetters, Microsoft.Maui.Controls.ItemsLayout.SnapPointsAlignmentProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SnapPointsType<T>(this T self,
        Microsoft.Maui.Controls.SnapPointsType snapPointsType)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsLayout.SnapPointsTypeProperty, snapPointsType);
        return self;
    }
    
    public static T SnapPointsType<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SnapPointsType>, IPropertyBuilder<T, Microsoft.Maui.Controls.SnapPointsType>> configure)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SnapPointsType>(self, Microsoft.Maui.Controls.ItemsLayout.SnapPointsTypeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SnapPointsType<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SnapPointsType snapPointsType)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsLayout.SnapPointsTypeProperty, Value = snapPointsType });
        return self;
    }
    
    public static SettersContext<T> SnapPointsType<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SnapPointsType>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SnapPointsType>> configure)
        where T : Microsoft.Maui.Controls.ItemsLayout
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SnapPointsType>(self.XamlSetters, Microsoft.Maui.Controls.ItemsLayout.SnapPointsTypeProperty);
        configure(context).Build();
        return self;
    }
    
}


