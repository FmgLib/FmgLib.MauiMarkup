//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ItemsViewExtension
{
    public static T EmptyView<T>(this T self,
        object emptyView)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.EmptyViewProperty, emptyView);
        return self;
    }
    
    public static T EmptyView<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.ItemsView.EmptyViewProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> EmptyView<T>(this SettersContext<T> self,
        object emptyView)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.EmptyViewProperty, Value = emptyView });
        return self;
    }
    
    public static SettersContext<T> EmptyView<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.EmptyViewProperty);
        configure(context).Build();
        return self;
    }
    
    public static T EmptyViewTemplate<T>(this T self,
        Microsoft.Maui.Controls.DataTemplate emptyViewTemplate)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.EmptyViewTemplateProperty, emptyViewTemplate);
        return self;
    }
    
    public static T EmptyViewTemplate<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ItemsView.EmptyViewTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> EmptyViewTemplate<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.DataTemplate emptyViewTemplate)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.EmptyViewTemplateProperty, Value = emptyViewTemplate });
        return self;
    }
    
    public static SettersContext<T> EmptyViewTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.EmptyViewTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T EmptyViewTemplate<T>(this T self, System.Func<object> loadTemplate)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.EmptyViewTemplateProperty, new DataTemplate(loadTemplate));
        return self;
    }
    
    public static T HorizontalScrollBarVisibility<T>(this T self,
        Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.HorizontalScrollBarVisibilityProperty, horizontalScrollBarVisibility);
        return self;
    }
    
    public static T HorizontalScrollBarVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertyBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ItemsView.HorizontalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HorizontalScrollBarVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.HorizontalScrollBarVisibilityProperty, Value = horizontalScrollBarVisibility });
        return self;
    }
    
    public static SettersContext<T> HorizontalScrollBarVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.HorizontalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T ItemsSource<T>(this T self,
        System.Collections.IEnumerable itemsSource)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.ItemsSourceProperty, itemsSource);
        return self;
    }
    
    public static T ItemsSource<T>(this T self, Func<PropertyContext<T, System.Collections.IEnumerable>, IPropertyBuilder<T, System.Collections.IEnumerable>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, System.Collections.IEnumerable>(self, Microsoft.Maui.Controls.ItemsView.ItemsSourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ItemsSource<T>(this SettersContext<T> self,
        System.Collections.IEnumerable itemsSource)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.ItemsSourceProperty, Value = itemsSource });
        return self;
    }
    
    public static SettersContext<T> ItemsSource<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Collections.IEnumerable>, IPropertySettersBuilder<T, System.Collections.IEnumerable>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, System.Collections.IEnumerable>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.ItemsSourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static T ItemsUpdatingScrollMode<T>(this T self,
        Microsoft.Maui.Controls.ItemsUpdatingScrollMode itemsUpdatingScrollMode)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.ItemsUpdatingScrollModeProperty, itemsUpdatingScrollMode);
        return self;
    }
    
    public static T ItemsUpdatingScrollMode<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.ItemsUpdatingScrollMode>, IPropertyBuilder<T, Microsoft.Maui.Controls.ItemsUpdatingScrollMode>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.ItemsUpdatingScrollMode>(self, Microsoft.Maui.Controls.ItemsView.ItemsUpdatingScrollModeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ItemsUpdatingScrollMode<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.ItemsUpdatingScrollMode itemsUpdatingScrollMode)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.ItemsUpdatingScrollModeProperty, Value = itemsUpdatingScrollMode });
        return self;
    }
    
    public static SettersContext<T> ItemsUpdatingScrollMode<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.ItemsUpdatingScrollMode>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.ItemsUpdatingScrollMode>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.ItemsUpdatingScrollMode>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.ItemsUpdatingScrollModeProperty);
        configure(context).Build();
        return self;
    }
    
    public static T ItemTemplate<T>(this T self,
        Microsoft.Maui.Controls.DataTemplate itemTemplate)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.ItemTemplateProperty, itemTemplate);
        return self;
    }
    
    public static T ItemTemplate<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ItemsView.ItemTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ItemTemplate<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.DataTemplate itemTemplate)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.ItemTemplateProperty, Value = itemTemplate });
        return self;
    }
    
    public static SettersContext<T> ItemTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.ItemTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T ItemTemplate<T>(this T self, System.Func<object> loadTemplate)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.ItemTemplateProperty, new DataTemplate(loadTemplate));
        return self;
    }
    
    public static T RemainingItemsThreshold<T>(this T self,
        int remainingItemsThreshold)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdProperty, remainingItemsThreshold);
        return self;
    }
    
    public static T RemainingItemsThreshold<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RemainingItemsThreshold<T>(this SettersContext<T> self,
        int remainingItemsThreshold)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdProperty, Value = remainingItemsThreshold });
        return self;
    }
    
    public static SettersContext<T> RemainingItemsThreshold<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdProperty);
        configure(context).Build();
        return self;
    }
    
    public static T RemainingItemsThresholdReachedCommand<T>(this T self,
        System.Windows.Input.ICommand remainingItemsThresholdReachedCommand)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandProperty, remainingItemsThresholdReachedCommand);
        return self;
    }
    
    public static T RemainingItemsThresholdReachedCommand<T>(this T self, Func<PropertyContext<T, System.Windows.Input.ICommand>, IPropertyBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RemainingItemsThresholdReachedCommand<T>(this SettersContext<T> self,
        System.Windows.Input.ICommand remainingItemsThresholdReachedCommand)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandProperty, Value = remainingItemsThresholdReachedCommand });
        return self;
    }
    
    public static SettersContext<T> RemainingItemsThresholdReachedCommand<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Windows.Input.ICommand>, IPropertySettersBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static T RemainingItemsThresholdReachedCommandParameter<T>(this T self,
        object remainingItemsThresholdReachedCommandParameter)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandParameterProperty, remainingItemsThresholdReachedCommandParameter);
        return self;
    }
    
    public static T RemainingItemsThresholdReachedCommandParameter<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RemainingItemsThresholdReachedCommandParameter<T>(this SettersContext<T> self,
        object remainingItemsThresholdReachedCommandParameter)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandParameterProperty, Value = remainingItemsThresholdReachedCommandParameter });
        return self;
    }
    
    public static SettersContext<T> RemainingItemsThresholdReachedCommandParameter<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.RemainingItemsThresholdReachedCommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static T VerticalScrollBarVisibility<T>(this T self,
        Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ItemsView.VerticalScrollBarVisibilityProperty, verticalScrollBarVisibility);
        return self;
    }
    
    public static T VerticalScrollBarVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertyBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ItemsView.VerticalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> VerticalScrollBarVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ItemsView.VerticalScrollBarVisibilityProperty, Value = verticalScrollBarVisibility });
        return self;
    }
    
    public static SettersContext<T> VerticalScrollBarVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ItemsView.VerticalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnRemainingItemsThresholdReached<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.RemainingItemsThresholdReached += handler;
        return self;
    }
    
    public static T OnRemainingItemsThresholdReached<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.RemainingItemsThresholdReached += (o, arg) => action(self);
        return self;
    }
        
    public static T OnScrolled<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemsViewScrolledEventArgs> handler)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.Scrolled += handler;
        return self;
    }
    
    public static T OnScrolled<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.Scrolled += (o, arg) => action(self);
        return self;
    }
        
    public static T OnScrollToRequested<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ScrollToRequestEventArgs> handler)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.ScrollToRequested += handler;
        return self;
    }
    
    public static T OnScrollToRequested<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ItemsView
    {
        self.ScrollToRequested += (o, arg) => action(self);
        return self;
    }
        
}


