//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ListViewExtension
{
    public static T Footer<T>(this T self,
        object footer)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.FooterProperty, footer);
        return self;
    }
    
    public static T Footer<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.ListView.FooterProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Footer<T>(this SettersContext<T> self,
        object footer)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.FooterProperty, Value = footer });
        return self;
    }
    
    public static SettersContext<T> Footer<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.ListView.FooterProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FooterTemplate<T>(this T self,
        Microsoft.Maui.Controls.DataTemplate footerTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.FooterTemplateProperty, footerTemplate);
        return self;
    }
    
    public static T FooterTemplate<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ListView.FooterTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FooterTemplate<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.DataTemplate footerTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.FooterTemplateProperty, Value = footerTemplate });
        return self;
    }
    
    public static SettersContext<T> FooterTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.ListView.FooterTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FooterTemplate<T>(this T self, System.Func<object> loadTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.FooterTemplateProperty, new DataTemplate(loadTemplate));
        return self;
    }
    
    public static T GroupDisplayBinding<T>(this T self,
        Microsoft.Maui.Controls.BindingBase groupDisplayBinding)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.GroupDisplayBinding = groupDisplayBinding;
        return self;
    }
    
    public static T GroupHeaderTemplate<T>(this T self,
        Microsoft.Maui.Controls.DataTemplate groupHeaderTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty, groupHeaderTemplate);
        return self;
    }
    
    public static T GroupHeaderTemplate<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> GroupHeaderTemplate<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.DataTemplate groupHeaderTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty, Value = groupHeaderTemplate });
        return self;
    }
    
    public static SettersContext<T> GroupHeaderTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T GroupHeaderTemplate<T>(this T self, System.Func<object> loadTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.GroupHeaderTemplateProperty, new DataTemplate(loadTemplate));
        return self;
    }
    
    public static T GroupShortNameBinding<T>(this T self,
        Microsoft.Maui.Controls.BindingBase groupShortNameBinding)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.GroupShortNameBinding = groupShortNameBinding;
        return self;
    }
    
    public static T HasUnevenRows<T>(this T self,
        bool hasUnevenRows)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty, hasUnevenRows);
        return self;
    }
    
    public static T HasUnevenRows<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HasUnevenRows<T>(this SettersContext<T> self,
        bool hasUnevenRows)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty, Value = hasUnevenRows });
        return self;
    }
    
    public static SettersContext<T> HasUnevenRows<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ListView.HasUnevenRowsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Header<T>(this T self,
        object header)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.HeaderProperty, header);
        return self;
    }
    
    public static T Header<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.ListView.HeaderProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Header<T>(this SettersContext<T> self,
        object header)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.HeaderProperty, Value = header });
        return self;
    }
    
    public static SettersContext<T> Header<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.ListView.HeaderProperty);
        configure(context).Build();
        return self;
    }
    
    public static T HeaderTemplate<T>(this T self,
        Microsoft.Maui.Controls.DataTemplate headerTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.HeaderTemplateProperty, headerTemplate);
        return self;
    }
    
    public static T HeaderTemplate<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertyBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.DataTemplate>(self, Microsoft.Maui.Controls.ListView.HeaderTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HeaderTemplate<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.DataTemplate headerTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.HeaderTemplateProperty, Value = headerTemplate });
        return self;
    }
    
    public static SettersContext<T> HeaderTemplate<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.DataTemplate>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.DataTemplate>(self.XamlSetters, Microsoft.Maui.Controls.ListView.HeaderTemplateProperty);
        configure(context).Build();
        return self;
    }
    
    public static T HeaderTemplate<T>(this T self, System.Func<object> loadTemplate)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.HeaderTemplateProperty, new DataTemplate(loadTemplate));
        return self;
    }
    
    public static T HorizontalScrollBarVisibility<T>(this T self,
        Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty, horizontalScrollBarVisibility);
        return self;
    }
    
    public static T HorizontalScrollBarVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertyBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HorizontalScrollBarVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty, Value = horizontalScrollBarVisibility });
        return self;
    }
    
    public static SettersContext<T> HorizontalScrollBarVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ListView.HorizontalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsGroupingEnabled<T>(this T self,
        bool isGroupingEnabled)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty, isGroupingEnabled);
        return self;
    }
    
    public static T IsGroupingEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsGroupingEnabled<T>(this SettersContext<T> self,
        bool isGroupingEnabled)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty, Value = isGroupingEnabled });
        return self;
    }
    
    public static SettersContext<T> IsGroupingEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ListView.IsGroupingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsPullToRefreshEnabled<T>(this T self,
        bool isPullToRefreshEnabled)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty, isPullToRefreshEnabled);
        return self;
    }
    
    public static T IsPullToRefreshEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsPullToRefreshEnabled<T>(this SettersContext<T> self,
        bool isPullToRefreshEnabled)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty, Value = isPullToRefreshEnabled });
        return self;
    }
    
    public static SettersContext<T> IsPullToRefreshEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ListView.IsPullToRefreshEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsRefreshing<T>(this T self,
        bool isRefreshing)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.IsRefreshingProperty, isRefreshing);
        return self;
    }
    
    public static T IsRefreshing<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ListView.IsRefreshingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsRefreshing<T>(this SettersContext<T> self,
        bool isRefreshing)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.IsRefreshingProperty, Value = isRefreshing });
        return self;
    }
    
    public static SettersContext<T> IsRefreshing<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ListView.IsRefreshingProperty);
        configure(context).Build();
        return self;
    }
    
    public static T RefreshAllowed<T>(this T self,
        bool refreshAllowed)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.RefreshAllowed = refreshAllowed;
        return self;
    }
    
    public static T RefreshCommand<T>(this T self,
        System.Windows.Input.ICommand refreshCommand)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.RefreshCommandProperty, refreshCommand);
        return self;
    }
    
    public static T RefreshCommand<T>(this T self, Func<PropertyContext<T, System.Windows.Input.ICommand>, IPropertyBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.ListView.RefreshCommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RefreshCommand<T>(this SettersContext<T> self,
        System.Windows.Input.ICommand refreshCommand)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.RefreshCommandProperty, Value = refreshCommand });
        return self;
    }
    
    public static SettersContext<T> RefreshCommand<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Windows.Input.ICommand>, IPropertySettersBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.ListView.RefreshCommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static T RefreshControlColor<T>(this T self,
        Microsoft.Maui.Graphics.Color refreshControlColor)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.RefreshControlColorProperty, refreshControlColor);
        return self;
    }
    
    public static T RefreshControlColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ListView.RefreshControlColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RefreshControlColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color refreshControlColor)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.RefreshControlColorProperty, Value = refreshControlColor });
        return self;
    }
    
    public static SettersContext<T> RefreshControlColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.ListView.RefreshControlColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateRefreshControlColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ListView
    {
        Microsoft.Maui.Graphics.Color fromValue = self.RefreshControlColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.ListView.RefreshControlColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateRefreshControlColorTo", transform, callback, length, easing);
    }
    
    public static T RowHeight<T>(this T self,
        int rowHeight)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.RowHeightProperty, rowHeight);
        return self;
    }
    
    public static T RowHeight<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.ListView.RowHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RowHeight<T>(this SettersContext<T> self,
        int rowHeight)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.RowHeightProperty, Value = rowHeight });
        return self;
    }
    
    public static SettersContext<T> RowHeight<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.ListView.RowHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectedItem<T>(this T self,
        object selectedItem)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.SelectedItemProperty, selectedItem);
        return self;
    }
    
    public static T SelectedItem<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.ListView.SelectedItemProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectedItem<T>(this SettersContext<T> self,
        object selectedItem)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.SelectedItemProperty, Value = selectedItem });
        return self;
    }
    
    public static SettersContext<T> SelectedItem<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.ListView.SelectedItemProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectionMode<T>(this T self,
        Microsoft.Maui.Controls.ListViewSelectionMode selectionMode)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.SelectionModeProperty, selectionMode);
        return self;
    }
    
    public static T SelectionMode<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.ListViewSelectionMode>, IPropertyBuilder<T, Microsoft.Maui.Controls.ListViewSelectionMode>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.ListViewSelectionMode>(self, Microsoft.Maui.Controls.ListView.SelectionModeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectionMode<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.ListViewSelectionMode selectionMode)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.SelectionModeProperty, Value = selectionMode });
        return self;
    }
    
    public static SettersContext<T> SelectionMode<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.ListViewSelectionMode>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.ListViewSelectionMode>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.ListViewSelectionMode>(self.XamlSetters, Microsoft.Maui.Controls.ListView.SelectionModeProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SeparatorColor<T>(this T self,
        Microsoft.Maui.Graphics.Color separatorColor)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.SeparatorColorProperty, separatorColor);
        return self;
    }
    
    public static T SeparatorColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ListView.SeparatorColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SeparatorColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color separatorColor)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.SeparatorColorProperty, Value = separatorColor });
        return self;
    }
    
    public static SettersContext<T> SeparatorColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.ListView.SeparatorColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateSeparatorColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ListView
    {
        Microsoft.Maui.Graphics.Color fromValue = self.SeparatorColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.ListView.SeparatorColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateSeparatorColorTo", transform, callback, length, easing);
    }
    
    public static T SeparatorVisibility<T>(this T self,
        Microsoft.Maui.Controls.SeparatorVisibility separatorVisibility)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty, separatorVisibility);
        return self;
    }
    
    public static T SeparatorVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SeparatorVisibility>, IPropertyBuilder<T, Microsoft.Maui.Controls.SeparatorVisibility>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SeparatorVisibility>(self, Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SeparatorVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SeparatorVisibility separatorVisibility)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty, Value = separatorVisibility });
        return self;
    }
    
    public static SettersContext<T> SeparatorVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SeparatorVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SeparatorVisibility>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SeparatorVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ListView.SeparatorVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T VerticalScrollBarVisibility<T>(this T self,
        Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.SetValue(Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty, verticalScrollBarVisibility);
        return self;
    }
    
    public static T VerticalScrollBarVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertyBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> VerticalScrollBarVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty, Value = verticalScrollBarVisibility });
        return self;
    }
    
    public static SettersContext<T> VerticalScrollBarVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ListView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ListView.VerticalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnItemAppearing<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemVisibilityEventArgs> handler)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemAppearing += handler;
        return self;
    }
    
    public static T OnItemAppearing<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemAppearing += (o, arg) => action(self);
        return self;
    }
        
    public static T OnItemDisappearing<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemVisibilityEventArgs> handler)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemDisappearing += handler;
        return self;
    }
    
    public static T OnItemDisappearing<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemDisappearing += (o, arg) => action(self);
        return self;
    }
        
    public static T OnItemSelected<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SelectedItemChangedEventArgs> handler)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemSelected += handler;
        return self;
    }
    
    public static T OnItemSelected<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemSelected += (o, arg) => action(self);
        return self;
    }
        
    public static T OnItemTapped<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ItemTappedEventArgs> handler)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemTapped += handler;
        return self;
    }
    
    public static T OnItemTapped<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.ItemTapped += (o, arg) => action(self);
        return self;
    }
        
    public static T OnRefreshing<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.Refreshing += handler;
        return self;
    }
    
    public static T OnRefreshing<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.Refreshing += (o, arg) => action(self);
        return self;
    }
        
    public static T OnScrolled<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ScrolledEventArgs> handler)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.Scrolled += handler;
        return self;
    }
    
    public static T OnScrolled<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ListView
    {
        self.Scrolled += (o, arg) => action(self);
        return self;
    }
        
}


