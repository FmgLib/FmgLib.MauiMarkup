//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class MenuItemExtension
{
    public static T Command<T>(this T self,
        System.Windows.Input.ICommand command)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.SetValue(Microsoft.Maui.Controls.MenuItem.CommandProperty, command);
        return self;
    }
    
    public static T Command<T>(this T self, Func<PropertyContext<T, System.Windows.Input.ICommand>, IPropertyBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertyContext<T, System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.MenuItem.CommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Command<T>(this SettersContext<T> self,
        System.Windows.Input.ICommand command)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.MenuItem.CommandProperty, Value = command });
        return self;
    }
    
    public static SettersContext<T> Command<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Windows.Input.ICommand>, IPropertySettersBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertySettersContext<T, System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.MenuItem.CommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static T CommandParameter<T>(this T self,
        object commandParameter)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.SetValue(Microsoft.Maui.Controls.MenuItem.CommandParameterProperty, commandParameter);
        return self;
    }
    
    public static T CommandParameter<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.MenuItem.CommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CommandParameter<T>(this SettersContext<T> self,
        object commandParameter)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.MenuItem.CommandParameterProperty, Value = commandParameter });
        return self;
    }
    
    public static SettersContext<T> CommandParameter<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.MenuItem.CommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IconImageSource<T>(this T self,
        Microsoft.Maui.Controls.ImageSource iconImageSource)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.SetValue(Microsoft.Maui.Controls.MenuItem.IconImageSourceProperty, iconImageSource);
        return self;
    }
    
    public static T IconImageSource<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.ImageSource>, IPropertyBuilder<T, Microsoft.Maui.Controls.ImageSource>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.ImageSource>(self, Microsoft.Maui.Controls.MenuItem.IconImageSourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IconImageSource<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.ImageSource iconImageSource)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.MenuItem.IconImageSourceProperty, Value = iconImageSource });
        return self;
    }
    
    public static SettersContext<T> IconImageSource<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.ImageSource>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.ImageSource>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.ImageSource>(self.XamlSetters, Microsoft.Maui.Controls.MenuItem.IconImageSourceProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsDestructive<T>(this T self,
        bool isDestructive)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.SetValue(Microsoft.Maui.Controls.MenuItem.IsDestructiveProperty, isDestructive);
        return self;
    }
    
    public static T IsDestructive<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.MenuItem.IsDestructiveProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsDestructive<T>(this SettersContext<T> self,
        bool isDestructive)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.MenuItem.IsDestructiveProperty, Value = isDestructive });
        return self;
    }
    
    public static SettersContext<T> IsDestructive<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.MenuItem.IsDestructiveProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsEnabled<T>(this T self,
        bool isEnabled)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.SetValue(Microsoft.Maui.Controls.MenuItem.IsEnabledProperty, isEnabled);
        return self;
    }
    
    public static T IsEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.MenuItem.IsEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsEnabled<T>(this SettersContext<T> self,
        bool isEnabled)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.MenuItem.IsEnabledProperty, Value = isEnabled });
        return self;
    }
    
    public static SettersContext<T> IsEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.MenuItem.IsEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Text<T>(this T self,
        string text)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.SetValue(Microsoft.Maui.Controls.MenuItem.TextProperty, text);
        return self;
    }
    
    public static T Text<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.MenuItem.TextProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Text<T>(this SettersContext<T> self,
        string text)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.MenuItem.TextProperty, Value = text });
        return self;
    }
    
    public static SettersContext<T> Text<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.MenuItem.TextProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnClicked<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.Clicked += handler;
        return self;
    }
    
    public static T OnClicked<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.MenuItem
    {
        self.Clicked += (o, arg) => action(self);
        return self;
    }
        
}


