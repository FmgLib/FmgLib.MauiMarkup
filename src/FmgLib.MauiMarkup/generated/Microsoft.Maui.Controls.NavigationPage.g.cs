//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class NavigationPageExtension
{
    public static T BarBackground<T>(this T self,
        Microsoft.Maui.Controls.Brush barBackground)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.SetValue(Microsoft.Maui.Controls.NavigationPage.BarBackgroundProperty, barBackground);
        return self;
    }
    
    public static T BarBackground<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Brush>, IPropertyBuilder<T, Microsoft.Maui.Controls.Brush>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.NavigationPage.BarBackgroundProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BarBackground<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Brush barBackground)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.NavigationPage.BarBackgroundProperty, Value = barBackground });
        return self;
    }
    
    public static SettersContext<T> BarBackground<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Brush>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Brush>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Brush>(self.XamlSetters, Microsoft.Maui.Controls.NavigationPage.BarBackgroundProperty);
        configure(context).Build();
        return self;
    }
    
    public static T BarBackgroundColor<T>(this T self,
        Microsoft.Maui.Graphics.Color barBackgroundColor)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.SetValue(Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty, barBackgroundColor);
        return self;
    }
    
    public static T BarBackgroundColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BarBackgroundColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color barBackgroundColor)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty, Value = barBackgroundColor });
        return self;
    }
    
    public static SettersContext<T> BarBackgroundColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBarBackgroundColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        Microsoft.Maui.Graphics.Color fromValue = self.BarBackgroundColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.NavigationPage.BarBackgroundColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBarBackgroundColorTo", transform, callback, length, easing);
    }
    
    public static T BarTextColor<T>(this T self,
        Microsoft.Maui.Graphics.Color barTextColor)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.SetValue(Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty, barTextColor);
        return self;
    }
    
    public static T BarTextColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BarTextColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color barTextColor)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty, Value = barTextColor });
        return self;
    }
    
    public static SettersContext<T> BarTextColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBarTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        Microsoft.Maui.Graphics.Color fromValue = self.BarTextColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.NavigationPage.BarTextColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBarTextColorTo", transform, callback, length, easing);
    }
    
    public static T CurrentPage<T>(this T self,
        Microsoft.Maui.Controls.Page currentPage)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.SetValue(Microsoft.Maui.Controls.NavigationPage.CurrentPageProperty, currentPage);
        return self;
    }
    
    public static T CurrentPage<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Page>, IPropertyBuilder<T, Microsoft.Maui.Controls.Page>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Page>(self, Microsoft.Maui.Controls.NavigationPage.CurrentPageProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CurrentPage<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Page currentPage)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.NavigationPage.CurrentPageProperty, Value = currentPage });
        return self;
    }
    
    public static SettersContext<T> CurrentPage<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Page>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Page>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Page>(self.XamlSetters, Microsoft.Maui.Controls.NavigationPage.CurrentPageProperty);
        configure(context).Build();
        return self;
    }
    
    public static T RootPage<T>(this T self,
        Microsoft.Maui.Controls.Page rootPage)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.SetValue(Microsoft.Maui.Controls.NavigationPage.RootPageProperty, rootPage);
        return self;
    }
    
    public static T RootPage<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Page>, IPropertyBuilder<T, Microsoft.Maui.Controls.Page>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Page>(self, Microsoft.Maui.Controls.NavigationPage.RootPageProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RootPage<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Page rootPage)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.NavigationPage.RootPageProperty, Value = rootPage });
        return self;
    }
    
    public static SettersContext<T> RootPage<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Page>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Page>> configure)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Page>(self.XamlSetters, Microsoft.Maui.Controls.NavigationPage.RootPageProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnPopped<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.NavigationEventArgs> handler)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.Popped += handler;
        return self;
    }
    
    public static T OnPopped<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.Popped += (o, arg) => action(self);
        return self;
    }
        
    public static T OnPoppedToRoot<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.NavigationEventArgs> handler)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.PoppedToRoot += handler;
        return self;
    }
    
    public static T OnPoppedToRoot<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.PoppedToRoot += (o, arg) => action(self);
        return self;
    }
        
    public static T OnPushed<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.NavigationEventArgs> handler)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.Pushed += handler;
        return self;
    }
    
    public static T OnPushed<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.NavigationPage
    {
        self.Pushed += (o, arg) => action(self);
        return self;
    }
        
}


