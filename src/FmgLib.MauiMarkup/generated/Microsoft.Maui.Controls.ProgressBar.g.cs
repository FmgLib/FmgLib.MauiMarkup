//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ProgressBarExtension
{
    public static T Progress<T>(this T self,
        double progress)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        self.SetValue(Microsoft.Maui.Controls.ProgressBar.ProgressProperty, progress);
        return self;
    }
    
    public static T Progress<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.ProgressBar.ProgressProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Progress<T>(this SettersContext<T> self,
        double progress)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ProgressBar.ProgressProperty, Value = progress });
        return self;
    }
    
    public static SettersContext<T> Progress<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.ProgressBar.ProgressProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateProgressTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        double fromValue = self.Progress;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.ProgressBar.ProgressProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateProgressTo", transform, callback, length, easing);
    }
    
    public static T ProgressColor<T>(this T self,
        Microsoft.Maui.Graphics.Color progressColor)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        self.SetValue(Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty, progressColor);
        return self;
    }
    
    public static T ProgressColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ProgressColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color progressColor)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty, Value = progressColor });
        return self;
    }
    
    public static SettersContext<T> ProgressColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateProgressColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ProgressBar
    {
        Microsoft.Maui.Graphics.Color fromValue = self.ProgressColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.ProgressBar.ProgressColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateProgressColorTo", transform, callback, length, easing);
    }
    
}


