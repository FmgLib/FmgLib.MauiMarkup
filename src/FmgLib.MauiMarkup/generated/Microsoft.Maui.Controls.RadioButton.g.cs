//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class RadioButtonExtension
{
    public static T BorderColor<T>(this T self,
        Microsoft.Maui.Graphics.Color borderColor)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.BorderColorProperty, borderColor);
        return self;
    }
    
    public static T BorderColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.RadioButton.BorderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BorderColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color borderColor)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.BorderColorProperty, Value = borderColor });
        return self;
    }
    
    public static SettersContext<T> BorderColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.BorderColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBorderColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        Microsoft.Maui.Graphics.Color fromValue = self.BorderColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.RadioButton.BorderColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBorderColorTo", transform, callback, length, easing);
    }
    
    public static T BorderWidth<T>(this T self,
        double borderWidth)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.BorderWidthProperty, borderWidth);
        return self;
    }
    
    public static T BorderWidth<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.RadioButton.BorderWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BorderWidth<T>(this SettersContext<T> self,
        double borderWidth)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.BorderWidthProperty, Value = borderWidth });
        return self;
    }
    
    public static SettersContext<T> BorderWidth<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.BorderWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBorderWidthTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        double fromValue = self.BorderWidth;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.RadioButton.BorderWidthProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateBorderWidthTo", transform, callback, length, easing);
    }
    
    public static T CharacterSpacing<T>(this T self,
        double characterSpacing)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty, characterSpacing);
        return self;
    }
    
    public static T CharacterSpacing<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self,
        double characterSpacing)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty, Value = characterSpacing });
        return self;
    }
    
    public static SettersContext<T> CharacterSpacing<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateCharacterSpacingTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        double fromValue = self.CharacterSpacing;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.RadioButton.CharacterSpacingProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateCharacterSpacingTo", transform, callback, length, easing);
    }
    
    public static T Content<T>(this T self,
        object content)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.ContentProperty, content);
        return self;
    }
    
    public static T Content<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.RadioButton.ContentProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Content<T>(this SettersContext<T> self,
        object content)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.ContentProperty, Value = content });
        return self;
    }
    
    public static SettersContext<T> Content<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.ContentProperty);
        configure(context).Build();
        return self;
    }
    
    public static T CornerRadius<T>(this T self,
        int cornerRadius)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty, cornerRadius);
        return self;
    }
    
    public static T CornerRadius<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CornerRadius<T>(this SettersContext<T> self,
        int cornerRadius)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty, Value = cornerRadius });
        return self;
    }
    
    public static SettersContext<T> CornerRadius<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.CornerRadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontAttributes<T>(this T self,
        Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.FontAttributesProperty, fontAttributes);
        return self;
    }
    
    public static T FontAttributes<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.FontAttributes>, IPropertyBuilder<T, Microsoft.Maui.Controls.FontAttributes>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.FontAttributes>(self, Microsoft.Maui.Controls.RadioButton.FontAttributesProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontAttributes<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.FontAttributes fontAttributes)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.FontAttributesProperty, Value = fontAttributes });
        return self;
    }
    
    public static SettersContext<T> FontAttributes<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.FontAttributes>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.FontAttributes>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.FontAttributes>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.FontAttributesProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontAutoScalingEnabled<T>(this T self,
        bool fontAutoScalingEnabled)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty, fontAutoScalingEnabled);
        return self;
    }
    
    public static T FontAutoScalingEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontAutoScalingEnabled<T>(this SettersContext<T> self,
        bool fontAutoScalingEnabled)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty, Value = fontAutoScalingEnabled });
        return self;
    }
    
    public static SettersContext<T> FontAutoScalingEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.FontAutoScalingEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontFamily<T>(this T self,
        string fontFamily)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.FontFamilyProperty, fontFamily);
        return self;
    }
    
    public static T FontFamily<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.RadioButton.FontFamilyProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontFamily<T>(this SettersContext<T> self,
        string fontFamily)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.FontFamilyProperty, Value = fontFamily });
        return self;
    }
    
    public static SettersContext<T> FontFamily<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.FontFamilyProperty);
        configure(context).Build();
        return self;
    }
    
    public static T FontSize<T>(this T self,
        double fontSize)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.FontSizeProperty, fontSize);
        return self;
    }
    
    public static T FontSize<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.RadioButton.FontSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FontSize<T>(this SettersContext<T> self,
        double fontSize)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.FontSizeProperty, Value = fontSize });
        return self;
    }
    
    public static SettersContext<T> FontSize<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.FontSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateFontSizeTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        double fromValue = self.FontSize;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.RadioButton.FontSizeProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateFontSizeTo", transform, callback, length, easing);
    }
    
    public static T GroupName<T>(this T self,
        string groupName)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.GroupNameProperty, groupName);
        return self;
    }
    
    public static T GroupName<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.RadioButton.GroupNameProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> GroupName<T>(this SettersContext<T> self,
        string groupName)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.GroupNameProperty, Value = groupName });
        return self;
    }
    
    public static SettersContext<T> GroupName<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.GroupNameProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsChecked<T>(this T self,
        bool isChecked)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.IsCheckedProperty, isChecked);
        return self;
    }
    
    public static T IsChecked<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.RadioButton.IsCheckedProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsChecked<T>(this SettersContext<T> self,
        bool isChecked)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.IsCheckedProperty, Value = isChecked });
        return self;
    }
    
    public static SettersContext<T> IsChecked<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.IsCheckedProperty);
        configure(context).Build();
        return self;
    }
    
    public static T TextColor<T>(this T self,
        Microsoft.Maui.Graphics.Color textColor)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.TextColorProperty, textColor);
        return self;
    }
    
    public static T TextColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.RadioButton.TextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TextColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color textColor)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.TextColorProperty, Value = textColor });
        return self;
    }
    
    public static SettersContext<T> TextColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.TextColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateTextColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        Microsoft.Maui.Graphics.Color fromValue = self.TextColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.RadioButton.TextColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateTextColorTo", transform, callback, length, easing);
    }
    
    public static T TextTransform<T>(this T self,
        Microsoft.Maui.TextTransform textTransform)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.TextTransformProperty, textTransform);
        return self;
    }
    
    public static T TextTransform<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.TextTransform>, IPropertyBuilder<T, Microsoft.Maui.TextTransform>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, Microsoft.Maui.TextTransform>(self, Microsoft.Maui.Controls.RadioButton.TextTransformProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TextTransform<T>(this SettersContext<T> self,
        Microsoft.Maui.TextTransform textTransform)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.TextTransformProperty, Value = textTransform });
        return self;
    }
    
    public static SettersContext<T> TextTransform<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.TextTransform>, IPropertySettersBuilder<T, Microsoft.Maui.TextTransform>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.TextTransform>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.TextTransformProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Value<T>(this T self,
        object value)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.SetValue(Microsoft.Maui.Controls.RadioButton.ValueProperty, value);
        return self;
    }
    
    public static T Value<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.RadioButton.ValueProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Value<T>(this SettersContext<T> self,
        object value)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.RadioButton.ValueProperty, Value = value });
        return self;
    }
    
    public static SettersContext<T> Value<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.RadioButton.ValueProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnCheckedChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.CheckedChangedEventArgs> handler)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.CheckedChanged += handler;
        return self;
    }
    
    public static T OnCheckedChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.RadioButton
    {
        self.CheckedChanged += (o, arg) => action(self);
        return self;
    }
        
}


