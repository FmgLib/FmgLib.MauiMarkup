//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ReorderableItemsViewExtension
{
    public static T CanMixGroups<T>(this T self,
        bool canMixGroups)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ReorderableItemsView.CanMixGroupsProperty, canMixGroups);
        return self;
    }
    
    public static T CanMixGroups<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ReorderableItemsView.CanMixGroupsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CanMixGroups<T>(this SettersContext<T> self,
        bool canMixGroups)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ReorderableItemsView.CanMixGroupsProperty, Value = canMixGroups });
        return self;
    }
    
    public static SettersContext<T> CanMixGroups<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ReorderableItemsView.CanMixGroupsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T CanReorderItems<T>(this T self,
        bool canReorderItems)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.ReorderableItemsView.CanReorderItemsProperty, canReorderItems);
        return self;
    }
    
    public static T CanReorderItems<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.ReorderableItemsView.CanReorderItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> CanReorderItems<T>(this SettersContext<T> self,
        bool canReorderItems)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ReorderableItemsView.CanReorderItemsProperty, Value = canReorderItems });
        return self;
    }
    
    public static SettersContext<T> CanReorderItems<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.ReorderableItemsView.CanReorderItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnReorderCompleted<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        self.ReorderCompleted += handler;
        return self;
    }
    
    public static T OnReorderCompleted<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ReorderableItemsView
    {
        self.ReorderCompleted += (o, arg) => action(self);
        return self;
    }
        
}


