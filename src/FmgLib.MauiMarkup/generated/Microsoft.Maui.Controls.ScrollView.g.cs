//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ScrollViewExtension
{
    public static T Content<T>(this T self,
        Microsoft.Maui.Controls.View content)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.Content = content;
        return self;
    }
    
    public static T ContentSize<T>(this T self,
        Microsoft.Maui.Graphics.Size contentSize)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.SetValue(Microsoft.Maui.Controls.ScrollView.ContentSizeProperty, contentSize);
        return self;
    }
    
    public static T ContentSize<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Size>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Size>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Size>(self, Microsoft.Maui.Controls.ScrollView.ContentSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ContentSize<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Size contentSize)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ScrollView.ContentSizeProperty, Value = contentSize });
        return self;
    }
    
    public static SettersContext<T> ContentSize<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Size>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Size>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Size>(self.XamlSetters, Microsoft.Maui.Controls.ScrollView.ContentSizeProperty);
        configure(context).Build();
        return self;
    }
    
    public static T HorizontalScrollBarVisibility<T>(this T self,
        Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.SetValue(Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty, horizontalScrollBarVisibility);
        return self;
    }
    
    public static T HorizontalScrollBarVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertyBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HorizontalScrollBarVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollBarVisibility horizontalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty, Value = horizontalScrollBarVisibility });
        return self;
    }
    
    public static SettersContext<T> HorizontalScrollBarVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ScrollView.HorizontalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Orientation<T>(this T self,
        Microsoft.Maui.ScrollOrientation orientation)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.SetValue(Microsoft.Maui.Controls.ScrollView.OrientationProperty, orientation);
        return self;
    }
    
    public static T Orientation<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollOrientation>, IPropertyBuilder<T, Microsoft.Maui.ScrollOrientation>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollOrientation>(self, Microsoft.Maui.Controls.ScrollView.OrientationProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Orientation<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollOrientation orientation)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ScrollView.OrientationProperty, Value = orientation });
        return self;
    }
    
    public static SettersContext<T> Orientation<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollOrientation>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollOrientation>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollOrientation>(self.XamlSetters, Microsoft.Maui.Controls.ScrollView.OrientationProperty);
        configure(context).Build();
        return self;
    }
    
    public static T ScrollX<T>(this T self,
        double scrollX)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.SetValue(Microsoft.Maui.Controls.ScrollView.ScrollXProperty, scrollX);
        return self;
    }
    
    public static T ScrollX<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.ScrollView.ScrollXProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ScrollX<T>(this SettersContext<T> self,
        double scrollX)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ScrollView.ScrollXProperty, Value = scrollX });
        return self;
    }
    
    public static SettersContext<T> ScrollX<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.ScrollView.ScrollXProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateScrollXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        double fromValue = self.ScrollX;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.ScrollView.ScrollXProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateScrollXTo", transform, callback, length, easing);
    }
    
    public static T ScrollY<T>(this T self,
        double scrollY)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.SetValue(Microsoft.Maui.Controls.ScrollView.ScrollYProperty, scrollY);
        return self;
    }
    
    public static T ScrollY<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.ScrollView.ScrollYProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ScrollY<T>(this SettersContext<T> self,
        double scrollY)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ScrollView.ScrollYProperty, Value = scrollY });
        return self;
    }
    
    public static SettersContext<T> ScrollY<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.ScrollView.ScrollYProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateScrollYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        double fromValue = self.ScrollY;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.ScrollView.ScrollYProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateScrollYTo", transform, callback, length, easing);
    }
    
    public static T VerticalScrollBarVisibility<T>(this T self,
        Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.SetValue(Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty, verticalScrollBarVisibility);
        return self;
    }
    
    public static T VerticalScrollBarVisibility<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertyBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertyContext<T, Microsoft.Maui.ScrollBarVisibility>(self, Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> VerticalScrollBarVisibility<T>(this SettersContext<T> self,
        Microsoft.Maui.ScrollBarVisibility verticalScrollBarVisibility)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty, Value = verticalScrollBarVisibility });
        return self;
    }
    
    public static SettersContext<T> VerticalScrollBarVisibility<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>, IPropertySettersBuilder<T, Microsoft.Maui.ScrollBarVisibility>> configure)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ScrollBarVisibility>(self.XamlSetters, Microsoft.Maui.Controls.ScrollView.VerticalScrollBarVisibilityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnScrolled<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ScrolledEventArgs> handler)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.Scrolled += handler;
        return self;
    }
    
    public static T OnScrolled<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.ScrollView
    {
        self.Scrolled += (o, arg) => action(self);
        return self;
    }
        
}


