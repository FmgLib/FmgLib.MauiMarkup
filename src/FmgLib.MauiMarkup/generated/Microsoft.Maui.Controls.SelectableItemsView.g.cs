//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class SelectableItemsViewExtension
{
    public static T SelectedItem<T>(this T self,
        object selectedItem)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty, selectedItem);
        return self;
    }
    
    public static T SelectedItem<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectedItem<T>(this SettersContext<T> self,
        object selectedItem)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty, Value = selectedItem });
        return self;
    }
    
    public static SettersContext<T> SelectedItem<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.SelectableItemsView.SelectedItemProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectedItems<T>(this T self,
        System.Collections.Generic.IList<object> selectedItems)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.SelectableItemsView.SelectedItemsProperty, selectedItems);
        return self;
    }
    
    public static T SelectedItems<T>(this T self, Func<PropertyContext<T, System.Collections.Generic.IList<object>>, IPropertyBuilder<T, System.Collections.Generic.IList<object>>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertyContext<T, System.Collections.Generic.IList<object>>(self, Microsoft.Maui.Controls.SelectableItemsView.SelectedItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectedItems<T>(this SettersContext<T> self,
        System.Collections.Generic.IList<object> selectedItems)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SelectableItemsView.SelectedItemsProperty, Value = selectedItems });
        return self;
    }
    
    public static SettersContext<T> SelectedItems<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Collections.Generic.IList<object>>, IPropertySettersBuilder<T, System.Collections.Generic.IList<object>>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertySettersContext<T, System.Collections.Generic.IList<object>>(self.XamlSetters, Microsoft.Maui.Controls.SelectableItemsView.SelectedItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectionChangedCommand<T>(this T self,
        System.Windows.Input.ICommand selectionChangedCommand)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty, selectionChangedCommand);
        return self;
    }
    
    public static T SelectionChangedCommand<T>(this T self, Func<PropertyContext<T, System.Windows.Input.ICommand>, IPropertyBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertyContext<T, System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectionChangedCommand<T>(this SettersContext<T> self,
        System.Windows.Input.ICommand selectionChangedCommand)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty, Value = selectionChangedCommand });
        return self;
    }
    
    public static SettersContext<T> SelectionChangedCommand<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Windows.Input.ICommand>, IPropertySettersBuilder<T, System.Windows.Input.ICommand>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertySettersContext<T, System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectionChangedCommandParameter<T>(this T self,
        object selectionChangedCommandParameter)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty, selectionChangedCommandParameter);
        return self;
    }
    
    public static T SelectionChangedCommandParameter<T>(this T self, Func<PropertyContext<T, object>, IPropertyBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertyContext<T, object>(self, Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectionChangedCommandParameter<T>(this SettersContext<T> self,
        object selectionChangedCommandParameter)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty, Value = selectionChangedCommandParameter });
        return self;
    }
    
    public static SettersContext<T> SelectionChangedCommandParameter<T>(this SettersContext<T> self, Func<PropertySettersContext<T, object>, IPropertySettersBuilder<T, object>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertySettersContext<T, object>(self.XamlSetters, Microsoft.Maui.Controls.SelectableItemsView.SelectionChangedCommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static T SelectionMode<T>(this T self,
        Microsoft.Maui.Controls.SelectionMode selectionMode)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SetValue(Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty, selectionMode);
        return self;
    }
    
    public static T SelectionMode<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SelectionMode>, IPropertyBuilder<T, Microsoft.Maui.Controls.SelectionMode>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SelectionMode>(self, Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> SelectionMode<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SelectionMode selectionMode)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty, Value = selectionMode });
        return self;
    }
    
    public static SettersContext<T> SelectionMode<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SelectionMode>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SelectionMode>> configure)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SelectionMode>(self.XamlSetters, Microsoft.Maui.Controls.SelectableItemsView.SelectionModeProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnSelectionChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SelectionChangedEventArgs> handler)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SelectionChanged += handler;
        return self;
    }
    
    public static T OnSelectionChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.SelectableItemsView
    {
        self.SelectionChanged += (o, arg) => action(self);
        return self;
    }
        
}


