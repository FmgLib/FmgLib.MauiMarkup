//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class ShadowExtension
{
    public static T Brush<T>(this T self,
        Microsoft.Maui.Controls.Brush brush)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.SetValue(Microsoft.Maui.Controls.Shadow.BrushProperty, brush);
        return self;
    }
    
    public static T Brush<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Brush>, IPropertyBuilder<T, Microsoft.Maui.Controls.Brush>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.Shadow.BrushProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Brush<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Brush brush)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shadow.BrushProperty, Value = brush });
        return self;
    }
    
    public static SettersContext<T> Brush<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Brush>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Brush>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Brush>(self.XamlSetters, Microsoft.Maui.Controls.Shadow.BrushProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Offset<T>(this T self,
        Microsoft.Maui.Graphics.Point offset)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.SetValue(Microsoft.Maui.Controls.Shadow.OffsetProperty, offset);
        return self;
    }
    
    public static T Offset<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Point>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Point>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Point>(self, Microsoft.Maui.Controls.Shadow.OffsetProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Offset<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Point offset)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shadow.OffsetProperty, Value = offset });
        return self;
    }
    
    public static SettersContext<T> Offset<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Point>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Point>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Point>(self.XamlSetters, Microsoft.Maui.Controls.Shadow.OffsetProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Opacity<T>(this T self,
        float opacity)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.SetValue(Microsoft.Maui.Controls.Shadow.OpacityProperty, opacity);
        return self;
    }
    
    public static T Opacity<T>(this T self, Func<PropertyContext<T, float>, IPropertyBuilder<T, float>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertyContext<T, float>(self, Microsoft.Maui.Controls.Shadow.OpacityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Opacity<T>(this SettersContext<T> self,
        float opacity)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shadow.OpacityProperty, Value = opacity });
        return self;
    }
    
    public static SettersContext<T> Opacity<T>(this SettersContext<T> self, Func<PropertySettersContext<T, float>, IPropertySettersBuilder<T, float>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertySettersContext<T, float>(self.XamlSetters, Microsoft.Maui.Controls.Shadow.OpacityProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Radius<T>(this T self,
        float radius)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.SetValue(Microsoft.Maui.Controls.Shadow.RadiusProperty, radius);
        return self;
    }
    
    public static T Radius<T>(this T self, Func<PropertyContext<T, float>, IPropertyBuilder<T, float>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertyContext<T, float>(self, Microsoft.Maui.Controls.Shadow.RadiusProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Radius<T>(this SettersContext<T> self,
        float radius)
        where T : Microsoft.Maui.Controls.Shadow
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Shadow.RadiusProperty, Value = radius });
        return self;
    }
    
    public static SettersContext<T> Radius<T>(this SettersContext<T> self, Func<PropertySettersContext<T, float>, IPropertySettersBuilder<T, float>> configure)
        where T : Microsoft.Maui.Controls.Shadow
    {
        var context = new PropertySettersContext<T, float>(self.XamlSetters, Microsoft.Maui.Controls.Shadow.RadiusProperty);
        configure(context).Build();
        return self;
    }
    
}


