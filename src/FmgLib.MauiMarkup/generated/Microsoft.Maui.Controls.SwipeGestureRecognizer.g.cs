//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class SwipeGestureRecognizerExtension
{
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        System.Windows.Input.ICommand command)
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty, command);
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer Command(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , System.Windows.Input.ICommand>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer , System.Windows.Input.ICommand>> configure)
    {
        var context = new PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , System.Windows.Input.ICommand>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Command(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
        System.Windows.Input.ICommand command)
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty, Value = command });
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Command(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, System.Windows.Input.ICommand>, IPropertySettersBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer, System.Windows.Input.ICommand>> configure)
    {
        var context = new PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, System.Windows.Input.ICommand>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandProperty);
        configure(context).Build();
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        object commandParameter)
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty, commandParameter);
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer CommandParameter(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , object>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer , object>> configure)
    {
        var context = new PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , object>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> CommandParameter(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
        object commandParameter)
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty, Value = commandParameter });
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> CommandParameter(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, object>, IPropertySettersBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer, object>> configure)
    {
        var context = new PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, object>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.CommandParameterProperty);
        configure(context).Build();
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        Microsoft.Maui.SwipeDirection direction)
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty, direction);
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer Direction(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , Microsoft.Maui.SwipeDirection>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer , Microsoft.Maui.SwipeDirection>> configure)
    {
        var context = new PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , Microsoft.Maui.SwipeDirection>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Direction(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
        Microsoft.Maui.SwipeDirection direction)
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty, Value = direction });
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Direction(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, Microsoft.Maui.SwipeDirection>, IPropertySettersBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer, Microsoft.Maui.SwipeDirection>> configure)
    {
        var context = new PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, Microsoft.Maui.SwipeDirection>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.DirectionProperty);
        configure(context).Build();
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self,
        uint threshold)
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty, threshold);
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer Threshold(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, Func<PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , uint>, IPropertyBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer , uint>> configure)
    {
        var context = new PropertyContext<Microsoft.Maui.Controls.SwipeGestureRecognizer , uint>(self, Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Threshold(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self,
        uint threshold)
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty, Value = threshold });
        return self;
    }
    
    public static SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> Threshold(this SettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer> self, Func<PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, uint>, IPropertySettersBuilder<Microsoft.Maui.Controls.SwipeGestureRecognizer, uint>> configure)
    {
        var context = new PropertySettersContext<Microsoft.Maui.Controls.SwipeGestureRecognizer, uint>(self.XamlSetters, Microsoft.Maui.Controls.SwipeGestureRecognizer.ThresholdProperty);
        configure(context).Build();
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer OnSwiped(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.EventHandler<Microsoft.Maui.Controls.SwipedEventArgs> handler)
    {
        self.Swiped += handler;
        return self;
    }
    
    public static Microsoft.Maui.Controls.SwipeGestureRecognizer OnSwiped(this Microsoft.Maui.Controls.SwipeGestureRecognizer self, System.Action<Microsoft.Maui.Controls.SwipeGestureRecognizer> action)
    {
        self.Swiped += (o, arg) => action(self);
        return self;
    }
        
}


