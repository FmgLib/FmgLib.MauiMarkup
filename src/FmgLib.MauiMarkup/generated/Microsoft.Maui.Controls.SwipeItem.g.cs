//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class SwipeItemExtension
{
    public static T BackgroundColor<T>(this T self,
        Microsoft.Maui.Graphics.Color backgroundColor)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeItem.BackgroundColorProperty, backgroundColor);
        return self;
    }
    
    public static T BackgroundColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.SwipeItem.BackgroundColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BackgroundColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color backgroundColor)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeItem.BackgroundColorProperty, Value = backgroundColor });
        return self;
    }
    
    public static SettersContext<T> BackgroundColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.SwipeItem.BackgroundColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsVisible<T>(this T self,
        bool isVisible)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeItem.IsVisibleProperty, isVisible);
        return self;
    }
    
    public static T IsVisible<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.SwipeItem.IsVisibleProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsVisible<T>(this SettersContext<T> self,
        bool isVisible)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeItem.IsVisibleProperty, Value = isVisible });
        return self;
    }
    
    public static SettersContext<T> IsVisible<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.SwipeItem.IsVisibleProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnInvoked<T>(this T self, System.EventHandler<System.EventArgs> handler)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        self.Invoked += handler;
        return self;
    }
    
    public static T OnInvoked<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.SwipeItem
    {
        self.Invoked += (o, arg) => action(self);
        return self;
    }
        
}


