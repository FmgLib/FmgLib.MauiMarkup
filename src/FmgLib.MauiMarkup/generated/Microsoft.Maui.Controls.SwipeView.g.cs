//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class SwipeViewExtension
{
    public static T BottomItems<T>(this T self,
        Microsoft.Maui.Controls.SwipeItems bottomItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeView.BottomItemsProperty, bottomItems);
        return self;
    }
    
    public static T BottomItems<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BottomItems<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SwipeItems bottomItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeView.BottomItemsProperty, Value = bottomItems });
        return self;
    }
    
    public static SettersContext<T> BottomItems<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>(self.XamlSetters, Microsoft.Maui.Controls.SwipeView.BottomItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T LeftItems<T>(this T self,
        Microsoft.Maui.Controls.SwipeItems leftItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeView.LeftItemsProperty, leftItems);
        return self;
    }
    
    public static T LeftItems<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> LeftItems<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SwipeItems leftItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeView.LeftItemsProperty, Value = leftItems });
        return self;
    }
    
    public static SettersContext<T> LeftItems<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>(self.XamlSetters, Microsoft.Maui.Controls.SwipeView.LeftItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T RightItems<T>(this T self,
        Microsoft.Maui.Controls.SwipeItems rightItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeView.RightItemsProperty, rightItems);
        return self;
    }
    
    public static T RightItems<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.RightItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RightItems<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SwipeItems rightItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeView.RightItemsProperty, Value = rightItems });
        return self;
    }
    
    public static SettersContext<T> RightItems<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>(self.XamlSetters, Microsoft.Maui.Controls.SwipeView.RightItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Threshold<T>(this T self,
        double threshold)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, threshold);
        return self;
    }
    
    public static T Threshold<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.SwipeView.ThresholdProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Threshold<T>(this SettersContext<T> self,
        double threshold)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeView.ThresholdProperty, Value = threshold });
        return self;
    }
    
    public static SettersContext<T> Threshold<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.SwipeView.ThresholdProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateThresholdTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        double fromValue = self.Threshold;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.SwipeView.ThresholdProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateThresholdTo", transform, callback, length, easing);
    }
    
    public static T TopItems<T>(this T self,
        Microsoft.Maui.Controls.SwipeItems topItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SetValue(Microsoft.Maui.Controls.SwipeView.TopItemsProperty, topItems);
        return self;
    }
    
    public static T TopItems<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertyBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.SwipeItems>(self, Microsoft.Maui.Controls.SwipeView.TopItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TopItems<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.SwipeItems topItems)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwipeView.TopItemsProperty, Value = topItems });
        return self;
    }
    
    public static SettersContext<T> TopItems<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.SwipeItems>> configure)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.SwipeItems>(self.XamlSetters, Microsoft.Maui.Controls.SwipeView.TopItemsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnSwipeChanging<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeChangingEventArgs> handler)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SwipeChanging += handler;
        return self;
    }
    
    public static T OnSwipeChanging<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SwipeChanging += (o, arg) => action(self);
        return self;
    }
        
    public static T OnSwipeEnded<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeEndedEventArgs> handler)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SwipeEnded += handler;
        return self;
    }
    
    public static T OnSwipeEnded<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SwipeEnded += (o, arg) => action(self);
        return self;
    }
        
    public static T OnSwipeStarted<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.SwipeStartedEventArgs> handler)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SwipeStarted += handler;
        return self;
    }
    
    public static T OnSwipeStarted<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.SwipeView
    {
        self.SwipeStarted += (o, arg) => action(self);
        return self;
    }
        
}


