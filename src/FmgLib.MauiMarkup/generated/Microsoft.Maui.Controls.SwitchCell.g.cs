//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class SwitchCellExtension
{
    public static T On<T>(this T self,
        bool on)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.SetValue(Microsoft.Maui.Controls.SwitchCell.OnProperty, on);
        return self;
    }
    
    public static T On<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.SwitchCell.OnProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> On<T>(this SettersContext<T> self,
        bool on)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwitchCell.OnProperty, Value = on });
        return self;
    }
    
    public static SettersContext<T> On<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.SwitchCell.OnProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnColor<T>(this T self,
        Microsoft.Maui.Graphics.Color onColor)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.SetValue(Microsoft.Maui.Controls.SwitchCell.OnColorProperty, onColor);
        return self;
    }
    
    public static T OnColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.SwitchCell.OnColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> OnColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color onColor)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwitchCell.OnColorProperty, Value = onColor });
        return self;
    }
    
    public static SettersContext<T> OnColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.SwitchCell.OnColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Text<T>(this T self,
        string text)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.SetValue(Microsoft.Maui.Controls.SwitchCell.TextProperty, text);
        return self;
    }
    
    public static T Text<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        var context = new PropertyContext<T, string>(self, Microsoft.Maui.Controls.SwitchCell.TextProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Text<T>(this SettersContext<T> self,
        string text)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.SwitchCell.TextProperty, Value = text });
        return self;
    }
    
    public static SettersContext<T> Text<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        var context = new PropertySettersContext<T, string>(self.XamlSetters, Microsoft.Maui.Controls.SwitchCell.TextProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnOnChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ToggledEventArgs> handler)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.OnChanged += handler;
        return self;
    }
    
    public static T OnOnChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.SwitchCell
    {
        self.OnChanged += (o, arg) => action(self);
        return self;
    }
        
}


