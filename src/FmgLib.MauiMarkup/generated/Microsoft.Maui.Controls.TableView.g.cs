//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class TableViewExtension
{
    public static T HasUnevenRows<T>(this T self,
        bool hasUnevenRows)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.SetValue(Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty, hasUnevenRows);
        return self;
    }
    
    public static T HasUnevenRows<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.TableView
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HasUnevenRows<T>(this SettersContext<T> self,
        bool hasUnevenRows)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty, Value = hasUnevenRows });
        return self;
    }
    
    public static SettersContext<T> HasUnevenRows<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.TableView
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.TableView.HasUnevenRowsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Intent<T>(this T self,
        Microsoft.Maui.Controls.TableIntent intent)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.Intent = intent;
        return self;
    }
    
    public static T Model<T>(this T self,
        Microsoft.Maui.Controls.Internals.TableModel model)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.Model = model;
        return self;
    }
    
    public static T Root<T>(this T self,
        Microsoft.Maui.Controls.TableRoot root)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.Root = root;
        return self;
    }
    
    public static T RowHeight<T>(this T self,
        int rowHeight)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.SetValue(Microsoft.Maui.Controls.TableView.RowHeightProperty, rowHeight);
        return self;
    }
    
    public static T RowHeight<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.TableView
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.TableView.RowHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RowHeight<T>(this SettersContext<T> self,
        int rowHeight)
        where T : Microsoft.Maui.Controls.TableView
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.TableView.RowHeightProperty, Value = rowHeight });
        return self;
    }
    
    public static SettersContext<T> RowHeight<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.TableView
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.TableView.RowHeightProperty);
        configure(context).Build();
        return self;
    }
    
}


