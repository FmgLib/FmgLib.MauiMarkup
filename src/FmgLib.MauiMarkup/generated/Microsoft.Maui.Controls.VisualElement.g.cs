//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class VisualElementExtension
{
    public static T SizeRequest<T>(this T self, double widthAndHeightRequest) where T : VisualElement
    {
        self.SetValue(VisualElement.WidthRequestProperty, widthAndHeightRequest);
        self.SetValue(VisualElement.HeightRequestProperty, widthAndHeightRequest);
        return self;
    }

    public static T SizeRequest<T>(this T self, double widthRequest, double heightRequest) where T : VisualElement
    {
        self.SetValue(VisualElement.WidthRequestProperty, widthRequest);
        self.SetValue(VisualElement.HeightRequestProperty, heightRequest);
        return self;
    }

    public static SettersContext<T> SizeRequest<T>(this SettersContext<T> self, double widthAndHeightRequest) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = VisualElement.WidthRequestProperty,
            Value = widthAndHeightRequest
        });
        self.XamlSetters.Add(new Setter
        {
            Property = VisualElement.HeightRequestProperty,
            Value = widthAndHeightRequest
        });
        return self;
    }

    public static SettersContext<T> SizeRequest<T>(this SettersContext<T> self, double widthRequest, double heightRequest) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = VisualElement.WidthRequestProperty,
            Value = widthRequest
        });
        self.XamlSetters.Add(new Setter
        {
            Property = VisualElement.HeightRequestProperty,
            Value = heightRequest
        });
        return self;
    }

    public static Task<bool> AnimateSizeRequestTo<T>(this T self, double width, double height, uint length = 250u, Easing easing = null) where T : VisualElement
    {
        Size from = new Size(self.WidthRequest, self.HeightRequest);
        Size to = new Size(width, height);
        Func<double, Size> transform = (double t) => Transformations.SizeTransform(from, to, t);
        Action<Size> callback = delegate (Size value)
        {
            self.SizeRequest(value.Width, value.Height);
        };
        return Transformations.AnimateAsync(self, "AnimateSizeRequestTo", transform, callback, length, easing);
    }
    
    public static T AnchorX<T>(this T self,
        double anchorX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, anchorX);
        return self;
    }
    
    public static T AnchorX<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.AnchorXProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> AnchorX<T>(this SettersContext<T> self,
        double anchorX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.AnchorXProperty, Value = anchorX });
        return self;
    }
    
    public static SettersContext<T> AnchorX<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.AnchorXProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateAnchorXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.AnchorX;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.AnchorXProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateAnchorXTo", transform, callback, length, easing);
    }
    
    public static T AnchorY<T>(this T self,
        double anchorY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, anchorY);
        return self;
    }
    
    public static T AnchorY<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.AnchorYProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> AnchorY<T>(this SettersContext<T> self,
        double anchorY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.AnchorYProperty, Value = anchorY });
        return self;
    }
    
    public static SettersContext<T> AnchorY<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.AnchorYProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateAnchorYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.AnchorY;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.AnchorYProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateAnchorYTo", transform, callback, length, easing);
    }
    
    public static T Background<T>(this T self,
        Microsoft.Maui.Controls.Brush background)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.BackgroundProperty, background);
        return self;
    }
    
    public static T Background<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Brush>, IPropertyBuilder<T, Microsoft.Maui.Controls.Brush>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Brush>(self, Microsoft.Maui.Controls.VisualElement.BackgroundProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Background<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Brush background)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.BackgroundProperty, Value = background });
        return self;
    }
    
    public static SettersContext<T> Background<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Brush>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Brush>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Brush>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.BackgroundProperty);
        configure(context).Build();
        return self;
    }
    
    public static T BackgroundColor<T>(this T self,
        Microsoft.Maui.Graphics.Color backgroundColor)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, backgroundColor);
        return self;
    }
    
    public static T BackgroundColor<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Graphics.Color>, IPropertyBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.Graphics.Color>(self, Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> BackgroundColor<T>(this SettersContext<T> self,
        Microsoft.Maui.Graphics.Color backgroundColor)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, Value = backgroundColor });
        return self;
    }
    
    public static SettersContext<T> BackgroundColor<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Graphics.Color>, IPropertySettersBuilder<T, Microsoft.Maui.Graphics.Color>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Graphics.Color>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateBackgroundColorTo<T>(this T self, Microsoft.Maui.Graphics.Color value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        Microsoft.Maui.Graphics.Color fromValue = self.BackgroundColor;
        var transform = (double t) => Transformations.ColorTransform(fromValue, value, t);
        var callback = (Microsoft.Maui.Graphics.Color actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.BackgroundColorProperty, actValue); };
        return Transformations.AnimateAsync<Microsoft.Maui.Graphics.Color>(self, "AnimateBackgroundColorTo", transform, callback, length, easing);
    }
    
    public static T Behaviors<T>(this T self,
        System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior> behaviors)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.BehaviorsProperty, behaviors);
        return self;
    }
    
    public static T Behaviors<T>(this T self, Func<PropertyContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>, IPropertyBuilder<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>(self, Microsoft.Maui.Controls.VisualElement.BehaviorsProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Behaviors<T>(this SettersContext<T> self,
        System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior> behaviors)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.BehaviorsProperty, Value = behaviors });
        return self;
    }
    
    public static SettersContext<T> Behaviors<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>, IPropertySettersBuilder<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.Behavior>>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.BehaviorsProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Clip<T>(this T self,
        Microsoft.Maui.Controls.Shapes.Geometry clip)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.ClipProperty, clip);
        return self;
    }
    
    public static T Clip<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Shapes.Geometry>, IPropertyBuilder<T, Microsoft.Maui.Controls.Shapes.Geometry>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Shapes.Geometry>(self, Microsoft.Maui.Controls.VisualElement.ClipProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Clip<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Shapes.Geometry clip)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.ClipProperty, Value = clip });
        return self;
    }
    
    public static SettersContext<T> Clip<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Shapes.Geometry>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Shapes.Geometry>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Shapes.Geometry>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.ClipProperty);
        configure(context).Build();
        return self;
    }
    
    public static T DisableLayout<T>(this T self,
        bool disableLayout)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.DisableLayout = disableLayout;
        return self;
    }
    
    public static T FlowDirection<T>(this T self,
        Microsoft.Maui.FlowDirection flowDirection)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, flowDirection);
        return self;
    }
    
    public static T FlowDirection<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.FlowDirection>, IPropertyBuilder<T, Microsoft.Maui.FlowDirection>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.FlowDirection>(self, Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FlowDirection<T>(this SettersContext<T> self,
        Microsoft.Maui.FlowDirection flowDirection)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty, Value = flowDirection });
        return self;
    }
    
    public static SettersContext<T> FlowDirection<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.FlowDirection>, IPropertySettersBuilder<T, Microsoft.Maui.FlowDirection>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.FlowDirection>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.FlowDirectionProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Frame<T>(this T self,
        Microsoft.Maui.Graphics.Rect frame)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Frame = frame;
        return self;
    }
    
    public static T Height<T>(this T self,
        double height)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.HeightProperty, height);
        return self;
    }
    
    public static T Height<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.HeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Height<T>(this SettersContext<T> self,
        double height)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.HeightProperty, Value = height });
        return self;
    }
    
    public static SettersContext<T> Height<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.HeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateHeightTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.Height;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.HeightProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateHeightTo", transform, callback, length, easing);
    }
    
    public static T HeightRequest<T>(this T self,
        double heightRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, heightRequest);
        return self;
    }
    
    public static T HeightRequest<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.HeightRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> HeightRequest<T>(this SettersContext<T> self,
        double heightRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, Value = heightRequest });
        return self;
    }
    
    public static SettersContext<T> HeightRequest<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.HeightRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateHeightRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.HeightRequest;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.HeightRequestProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateHeightRequestTo", transform, callback, length, easing);
    }
    
    public static T InputTransparent<T>(this T self,
        bool inputTransparent)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, inputTransparent);
        return self;
    }
    
    public static T InputTransparent<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.VisualElement.InputTransparentProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> InputTransparent<T>(this SettersContext<T> self,
        bool inputTransparent)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.InputTransparentProperty, Value = inputTransparent });
        return self;
    }
    
    public static SettersContext<T> InputTransparent<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.InputTransparentProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsEnabled<T>(this T self,
        bool isEnabled)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, isEnabled);
        return self;
    }
    
    public static T IsEnabled<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.VisualElement.IsEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsEnabled<T>(this SettersContext<T> self,
        bool isEnabled)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.IsEnabledProperty, Value = isEnabled });
        return self;
    }
    
    public static SettersContext<T> IsEnabled<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.IsEnabledProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsFocused<T>(this T self,
        bool isFocused)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.IsFocusedProperty, isFocused);
        return self;
    }
    
    public static T IsFocused<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.VisualElement.IsFocusedProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsFocused<T>(this SettersContext<T> self,
        bool isFocused)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.IsFocusedProperty, Value = isFocused });
        return self;
    }
    
    public static SettersContext<T> IsFocused<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.IsFocusedProperty);
        configure(context).Build();
        return self;
    }
    
    public static T IsInPlatformLayout<T>(this T self,
        bool isInPlatformLayout)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.IsInPlatformLayout = isInPlatformLayout;
        return self;
    }
    
    public static T IsPlatformEnabled<T>(this T self,
        bool isPlatformEnabled)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.IsPlatformEnabled = isPlatformEnabled;
        return self;
    }
    
    public static T IsPlatformStateConsistent<T>(this T self,
        bool isPlatformStateConsistent)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.IsPlatformStateConsistent = isPlatformStateConsistent;
        return self;
    }
    
    public static T IsVisible<T>(this T self,
        bool isVisible)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, isVisible);
        return self;
    }
    
    public static T IsVisible<T>(this T self, Func<PropertyContext<T, bool>, IPropertyBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, bool>(self, Microsoft.Maui.Controls.VisualElement.IsVisibleProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> IsVisible<T>(this SettersContext<T> self,
        bool isVisible)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.IsVisibleProperty, Value = isVisible });
        return self;
    }
    
    public static SettersContext<T> IsVisible<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool>, IPropertySettersBuilder<T, bool>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, bool>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.IsVisibleProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MaximumHeightRequest<T>(this T self,
        double maximumHeightRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, maximumHeightRequest);
        return self;
    }
    
    public static T MaximumHeightRequest<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaximumHeightRequest<T>(this SettersContext<T> self,
        double maximumHeightRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, Value = maximumHeightRequest });
        return self;
    }
    
    public static SettersContext<T> MaximumHeightRequest<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateMaximumHeightRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.MaximumHeightRequest;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.MaximumHeightRequestProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateMaximumHeightRequestTo", transform, callback, length, easing);
    }
    
    public static T MaximumWidthRequest<T>(this T self,
        double maximumWidthRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, maximumWidthRequest);
        return self;
    }
    
    public static T MaximumWidthRequest<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaximumWidthRequest<T>(this SettersContext<T> self,
        double maximumWidthRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, Value = maximumWidthRequest });
        return self;
    }
    
    public static SettersContext<T> MaximumWidthRequest<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateMaximumWidthRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.MaximumWidthRequest;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.MaximumWidthRequestProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateMaximumWidthRequestTo", transform, callback, length, easing);
    }
    
    public static T MinimumHeightRequest<T>(this T self,
        double minimumHeightRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, minimumHeightRequest);
        return self;
    }
    
    public static T MinimumHeightRequest<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MinimumHeightRequest<T>(this SettersContext<T> self,
        double minimumHeightRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, Value = minimumHeightRequest });
        return self;
    }
    
    public static SettersContext<T> MinimumHeightRequest<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateMinimumHeightRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.MinimumHeightRequest;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.MinimumHeightRequestProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateMinimumHeightRequestTo", transform, callback, length, easing);
    }
    
    public static T MinimumWidthRequest<T>(this T self,
        double minimumWidthRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, minimumWidthRequest);
        return self;
    }
    
    public static T MinimumWidthRequest<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MinimumWidthRequest<T>(this SettersContext<T> self,
        double minimumWidthRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, Value = minimumWidthRequest });
        return self;
    }
    
    public static SettersContext<T> MinimumWidthRequest<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateMinimumWidthRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.MinimumWidthRequest;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.MinimumWidthRequestProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateMinimumWidthRequestTo", transform, callback, length, easing);
    }
    
    public static T Opacity<T>(this T self,
        double opacity)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.OpacityProperty, opacity);
        return self;
    }
    
    public static T Opacity<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.OpacityProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Opacity<T>(this SettersContext<T> self,
        double opacity)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.OpacityProperty, Value = opacity });
        return self;
    }
    
    public static SettersContext<T> Opacity<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.OpacityProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateOpacityTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.Opacity;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.OpacityProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateOpacityTo", transform, callback, length, easing);
    }
    
    public static T Resources<T>(this T self,
        Microsoft.Maui.Controls.ResourceDictionary resources)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Resources = resources;
        return self;
    }
    
    public static T Rotation<T>(this T self,
        double rotation)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.RotationProperty, rotation);
        return self;
    }
    
    public static T Rotation<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.RotationProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Rotation<T>(this SettersContext<T> self,
        double rotation)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.RotationProperty, Value = rotation });
        return self;
    }
    
    public static SettersContext<T> Rotation<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.RotationProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateRotationTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.Rotation;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.RotationProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateRotationTo", transform, callback, length, easing);
    }
    
    public static T RotationX<T>(this T self,
        double rotationX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.RotationXProperty, rotationX);
        return self;
    }
    
    public static T RotationX<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.RotationXProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RotationX<T>(this SettersContext<T> self,
        double rotationX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.RotationXProperty, Value = rotationX });
        return self;
    }
    
    public static SettersContext<T> RotationX<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.RotationXProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateRotationXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.RotationX;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.RotationXProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateRotationXTo", transform, callback, length, easing);
    }
    
    public static T RotationY<T>(this T self,
        double rotationY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.RotationYProperty, rotationY);
        return self;
    }
    
    public static T RotationY<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.RotationYProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> RotationY<T>(this SettersContext<T> self,
        double rotationY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.RotationYProperty, Value = rotationY });
        return self;
    }
    
    public static SettersContext<T> RotationY<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.RotationYProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateRotationYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.RotationY;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.RotationYProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateRotationYTo", transform, callback, length, easing);
    }
    
    public static T Scale<T>(this T self,
        double scale)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.ScaleProperty, scale);
        return self;
    }
    
    public static T Scale<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.ScaleProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Scale<T>(this SettersContext<T> self,
        double scale)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.ScaleProperty, Value = scale });
        return self;
    }
    
    public static SettersContext<T> Scale<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.ScaleProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateScaleTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.Scale;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.ScaleProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateScaleTo", transform, callback, length, easing);
    }
    
    public static T ScaleX<T>(this T self,
        double scaleX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, scaleX);
        return self;
    }
    
    public static T ScaleX<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.ScaleXProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ScaleX<T>(this SettersContext<T> self,
        double scaleX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.ScaleXProperty, Value = scaleX });
        return self;
    }
    
    public static SettersContext<T> ScaleX<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.ScaleXProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateScaleXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.ScaleX;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.ScaleXProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateScaleXTo", transform, callback, length, easing);
    }
    
    public static T ScaleY<T>(this T self,
        double scaleY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, scaleY);
        return self;
    }
    
    public static T ScaleY<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.ScaleYProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ScaleY<T>(this SettersContext<T> self,
        double scaleY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.ScaleYProperty, Value = scaleY });
        return self;
    }
    
    public static SettersContext<T> ScaleY<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.ScaleYProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateScaleYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.ScaleY;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.ScaleYProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateScaleYTo", transform, callback, length, easing);
    }
    
    public static T Shadow<T>(this T self,
        Microsoft.Maui.Controls.Shadow shadow)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.ShadowProperty, shadow);
        return self;
    }
    
    public static T Shadow<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Shadow>, IPropertyBuilder<T, Microsoft.Maui.Controls.Shadow>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Shadow>(self, Microsoft.Maui.Controls.VisualElement.ShadowProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Shadow<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Shadow shadow)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.ShadowProperty, Value = shadow });
        return self;
    }
    
    public static SettersContext<T> Shadow<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Shadow>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Shadow>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Shadow>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.ShadowProperty);
        configure(context).Build();
        return self;
    }
    
    public static T TranslationX<T>(this T self,
        double translationX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, translationX);
        return self;
    }
    
    public static T TranslationX<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.TranslationXProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TranslationX<T>(this SettersContext<T> self,
        double translationX)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.TranslationXProperty, Value = translationX });
        return self;
    }
    
    public static SettersContext<T> TranslationX<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.TranslationXProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateTranslationXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.TranslationX;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.TranslationXProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateTranslationXTo", transform, callback, length, easing);
    }
    
    public static T TranslationY<T>(this T self,
        double translationY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, translationY);
        return self;
    }
    
    public static T TranslationY<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.TranslationYProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TranslationY<T>(this SettersContext<T> self,
        double translationY)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.TranslationYProperty, Value = translationY });
        return self;
    }
    
    public static SettersContext<T> TranslationY<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.TranslationYProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateTranslationYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.TranslationY;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.TranslationYProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateTranslationYTo", transform, callback, length, easing);
    }
    
    public static T Triggers<T>(this T self,
        System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase> triggers)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.TriggersProperty, triggers);
        return self;
    }
    
    public static T Triggers<T>(this T self, params TriggerBase[] triggers) where T : VisualElement
    {
        foreach (TriggerBase item in triggers)
        {
            self.Triggers.Add(item);
        }

        return self;
    }
    
    public static T Triggers<T>(this T self, Func<PropertyContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>, IPropertyBuilder<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>(self, Microsoft.Maui.Controls.VisualElement.TriggersProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Triggers<T>(this SettersContext<T> self,
        System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase> triggers)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.TriggersProperty, Value = triggers });
        return self;
    }
    
    public static SettersContext<T> Triggers<T>(this SettersContext<T> self, Func<PropertySettersContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>, IPropertySettersBuilder<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, System.Collections.Generic.IList<Microsoft.Maui.Controls.TriggerBase>>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.TriggersProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Visual<T>(this T self,
        Microsoft.Maui.Controls.IVisual visual)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.VisualProperty, visual);
        return self;
    }
    
    public static T Visual<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.IVisual>, IPropertyBuilder<T, Microsoft.Maui.Controls.IVisual>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.IVisual>(self, Microsoft.Maui.Controls.VisualElement.VisualProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Visual<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.IVisual visual)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.VisualProperty, Value = visual });
        return self;
    }
    
    public static SettersContext<T> Visual<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.IVisual>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.IVisual>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.IVisual>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.VisualProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Width<T>(this T self,
        double width)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.WidthProperty, width);
        return self;
    }
    
    public static T Width<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.WidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Width<T>(this SettersContext<T> self,
        double width)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.WidthProperty, Value = width });
        return self;
    }
    
    public static SettersContext<T> Width<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.WidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateWidthTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.Width;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.WidthProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateWidthTo", transform, callback, length, easing);
    }
    
    public static T WidthRequest<T>(this T self,
        double widthRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, widthRequest);
        return self;
    }
    
    public static T WidthRequest<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.WidthRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> WidthRequest<T>(this SettersContext<T> self,
        double widthRequest)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, Value = widthRequest });
        return self;
    }
    
    public static SettersContext<T> WidthRequest<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.WidthRequestProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateWidthRequestTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.WidthRequest;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.WidthRequestProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateWidthRequestTo", transform, callback, length, easing);
    }
    
    public static T Window<T>(this T self,
        Microsoft.Maui.Controls.Window window)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.WindowProperty, window);
        return self;
    }
    
    public static T Window<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Window>, IPropertyBuilder<T, Microsoft.Maui.Controls.Window>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Window>(self, Microsoft.Maui.Controls.VisualElement.WindowProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Window<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Window window)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.WindowProperty, Value = window });
        return self;
    }
    
    public static SettersContext<T> Window<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Window>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Window>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Window>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.WindowProperty);
        configure(context).Build();
        return self;
    }
    
    public static T X<T>(this T self,
        double x)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.XProperty, x);
        return self;
    }
    
    public static T X<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.XProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> X<T>(this SettersContext<T> self,
        double x)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.XProperty, Value = x });
        return self;
    }
    
    public static SettersContext<T> X<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.XProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateXTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.X;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.XProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateXTo", transform, callback, length, easing);
    }
    
    public static T Y<T>(this T self,
        double y)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.YProperty, y);
        return self;
    }
    
    public static T Y<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.VisualElement.YProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Y<T>(this SettersContext<T> self,
        double y)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.YProperty, Value = y });
        return self;
    }
    
    public static SettersContext<T> Y<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.YProperty);
        configure(context).Build();
        return self;
    }
    
    public static Task<bool> AnimateYTo<T>(this T self, double value, uint length = 250, Easing? easing = null)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        double fromValue = self.Y;
        var transform = (double t) => Transformations.DoubleTransform(fromValue, value, t);
        var callback = (double actValue) => { self.SetValue(Microsoft.Maui.Controls.VisualElement.YProperty, actValue); };
        return Transformations.AnimateAsync<double>(self, "AnimateYTo", transform, callback, length, easing);
    }
    
    public static T ZIndex<T>(this T self,
        int zIndex)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SetValue(Microsoft.Maui.Controls.VisualElement.ZIndexProperty, zIndex);
        return self;
    }
    
    public static T ZIndex<T>(this T self, Func<PropertyContext<T, int>, IPropertyBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertyContext<T, int>(self, Microsoft.Maui.Controls.VisualElement.ZIndexProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> ZIndex<T>(this SettersContext<T> self,
        int zIndex)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.VisualElement.ZIndexProperty, Value = zIndex });
        return self;
    }
    
    public static SettersContext<T> ZIndex<T>(this SettersContext<T> self, Func<PropertySettersContext<T, int>, IPropertySettersBuilder<T, int>> configure)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        var context = new PropertySettersContext<T, int>(self.XamlSetters, Microsoft.Maui.Controls.VisualElement.ZIndexProperty);
        configure(context).Build();
        return self;
    }
    

    public static T VisualStateGroups<T>(this T self, VisualStateGroupList visualStateGroups) where T : VisualElement
    {
        self.SetValue(VisualStateManager.VisualStateGroupsProperty, visualStateGroups);
        return self;
    }

    public static T VisualStateGroups<T>(this T self, Func<PropertyContext<T, VisualStateGroupList>, IPropertyBuilder<T, VisualStateGroupList>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, VisualStateGroupList>(self, VisualStateManager.VisualStateGroupsProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> VisualStateGroups<T>(this SettersContext<T> self, VisualStateGroupList visualStateGroups) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = VisualStateManager.VisualStateGroupsProperty,
            Value = visualStateGroups
        });
        return self;
    }

    public static SettersContext<T> VisualStateGroups<T>(this SettersContext<T> self, Func<PropertySettersContext<T, VisualStateGroupList>, IPropertySettersBuilder<T, VisualStateGroupList>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, VisualStateGroupList>(self.XamlSetters, VisualStateManager.VisualStateGroupsProperty);
        configure(arg).Build();
        return self;
    }

    public static VisualStateGroupList GetVisualStateGroupsValue<T>(this T self) where T : VisualElement
    {
        return (VisualStateGroupList)self.GetValue(VisualStateManager.VisualStateGroupsProperty);
    }

    public static T AutomationExcludedWithChildren<T>(this T self, bool? automationExcludedWithChildren) where T : VisualElement
    {
        self.SetValue(AutomationProperties.ExcludedWithChildrenProperty, automationExcludedWithChildren);
        return self;
    }

    public static T AutomationExcludedWithChildren<T>(this T self, Func<PropertyContext<T, bool?>, IPropertyBuilder<T, bool?>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, bool?>(self, AutomationProperties.ExcludedWithChildrenProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> AutomationExcludedWithChildren<T>(this SettersContext<T> self, bool? automationExcludedWithChildren) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = AutomationProperties.ExcludedWithChildrenProperty,
            Value = automationExcludedWithChildren
        });
        return self;
    }

    public static SettersContext<T> AutomationExcludedWithChildren<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool?>, IPropertySettersBuilder<T, bool?>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, bool?>(self.XamlSetters, AutomationProperties.ExcludedWithChildrenProperty);
        configure(arg).Build();
        return self;
    }

    public static bool? GetAutomationExcludedWithChildrenValue<T>(this T self) where T : VisualElement
    {
        return (bool?)self.GetValue(AutomationProperties.ExcludedWithChildrenProperty);
    }

    public static T AutomationIsInAccessibleTree<T>(this T self, bool? automationIsInAccessibleTree) where T : VisualElement
    {
        self.SetValue(AutomationProperties.IsInAccessibleTreeProperty, automationIsInAccessibleTree);
        return self;
    }

    public static T AutomationIsInAccessibleTree<T>(this T self, Func<PropertyContext<T, bool?>, IPropertyBuilder<T, bool?>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, bool?>(self, AutomationProperties.IsInAccessibleTreeProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> AutomationIsInAccessibleTree<T>(this SettersContext<T> self, bool? automationIsInAccessibleTree) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = AutomationProperties.IsInAccessibleTreeProperty,
            Value = automationIsInAccessibleTree
        });
        return self;
    }

    public static SettersContext<T> AutomationIsInAccessibleTree<T>(this SettersContext<T> self, Func<PropertySettersContext<T, bool?>, IPropertySettersBuilder<T, bool?>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, bool?>(self.XamlSetters, AutomationProperties.IsInAccessibleTreeProperty);
        configure(arg).Build();
        return self;
    }

    public static bool? GetAutomationIsInAccessibleTreeValue<T>(this T self) where T : VisualElement
    {
        return (bool?)self.GetValue(AutomationProperties.IsInAccessibleTreeProperty);
    }

    public static T AutomationName<T>(this T self, string automationName) where T : VisualElement
    {
        self.SetValue(AutomationProperties.NameProperty, automationName);
        return self;
    }

    public static T AutomationName<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, string>(self, AutomationProperties.NameProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> AutomationName<T>(this SettersContext<T> self, string automationName) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = AutomationProperties.NameProperty,
            Value = automationName
        });
        return self;
    }

    public static SettersContext<T> AutomationName<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, string>(self.XamlSetters, AutomationProperties.NameProperty);
        configure(arg).Build();
        return self;
    }

    public static string GetAutomationNameValue<T>(this T self) where T : VisualElement
    {
        return (string)self.GetValue(AutomationProperties.NameProperty);
    }

    public static T AutomationHelpText<T>(this T self, string automationHelpText) where T : VisualElement
    {
        self.SetValue(AutomationProperties.HelpTextProperty, automationHelpText);
        return self;
    }

    public static T AutomationHelpText<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, string>(self, AutomationProperties.HelpTextProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> AutomationHelpText<T>(this SettersContext<T> self, string automationHelpText) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = AutomationProperties.HelpTextProperty,
            Value = automationHelpText
        });
        return self;
    }

    public static SettersContext<T> AutomationHelpText<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, string>(self.XamlSetters, AutomationProperties.HelpTextProperty);
        configure(arg).Build();
        return self;
    }

    public static string GetAutomationHelpTextValue<T>(this T self) where T : VisualElement
    {
        return (string)self.GetValue(AutomationProperties.HelpTextProperty);
    }

    public static T AutomationLabeledBy<T>(this T self, VisualElement automationLabeledBy) where T : VisualElement
    {
        self.SetValue(AutomationProperties.LabeledByProperty, automationLabeledBy);
        return self;
    }

    public static T AutomationLabeledBy<T>(this T self, Func<PropertyContext<T, VisualElement>, IPropertyBuilder<T, VisualElement>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, VisualElement>(self, AutomationProperties.LabeledByProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> AutomationLabeledBy<T>(this SettersContext<T> self, VisualElement automationLabeledBy) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = AutomationProperties.LabeledByProperty,
            Value = automationLabeledBy
        });
        return self;
    }

    public static SettersContext<T> AutomationLabeledBy<T>(this SettersContext<T> self, Func<PropertySettersContext<T, VisualElement>, IPropertySettersBuilder<T, VisualElement>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, VisualElement>(self.XamlSetters, AutomationProperties.LabeledByProperty);
        configure(arg).Build();
        return self;
    }

    public static VisualElement GetAutomationLabeledByValue<T>(this T self) where T : VisualElement
    {
        return (VisualElement)self.GetValue(AutomationProperties.LabeledByProperty);
    }

    public static T SemanticHint<T>(this T self, string semanticHint) where T : VisualElement
    {
        self.SetValue(SemanticProperties.HintProperty, semanticHint);
        return self;
    }

    public static T SemanticHint<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, string>(self, SemanticProperties.HintProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> SemanticHint<T>(this SettersContext<T> self, string semanticHint) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = SemanticProperties.HintProperty,
            Value = semanticHint
        });
        return self;
    }

    public static SettersContext<T> SemanticHint<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, string>(self.XamlSetters, SemanticProperties.HintProperty);
        configure(arg).Build();
        return self;
    }

    public static string GetSemanticHintValue<T>(this T self) where T : VisualElement
    {
        return (string)self.GetValue(SemanticProperties.HintProperty);
    }

    public static T SemanticDescription<T>(this T self, string semanticDescription) where T : VisualElement
    {
        self.SetValue(SemanticProperties.DescriptionProperty, semanticDescription);
        return self;
    }

    public static T SemanticDescription<T>(this T self, Func<PropertyContext<T, string>, IPropertyBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, string>(self, SemanticProperties.DescriptionProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> SemanticDescription<T>(this SettersContext<T> self, string semanticDescription) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = SemanticProperties.DescriptionProperty,
            Value = semanticDescription
        });
        return self;
    }

    public static SettersContext<T> SemanticDescription<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string>, IPropertySettersBuilder<T, string>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, string>(self.XamlSetters, SemanticProperties.DescriptionProperty);
        configure(arg).Build();
        return self;
    }

    public static string GetSemanticDescriptionValue<T>(this T self) where T : VisualElement
    {
        return (string)self.GetValue(SemanticProperties.DescriptionProperty);
    }

    public static T SemanticHeadingLevel<T>(this T self, SemanticHeadingLevel semanticHeadingLevel) where T : VisualElement
    {
        self.SetValue(SemanticProperties.HeadingLevelProperty, semanticHeadingLevel);
        return self;
    }

    public static T SemanticHeadingLevel<T>(this T self, Func<PropertyContext<T, SemanticHeadingLevel>, IPropertyBuilder<T, SemanticHeadingLevel>> configure) where T : VisualElement
    {
        var arg = new PropertyContext<T, SemanticHeadingLevel>(self, SemanticProperties.HeadingLevelProperty);
        configure(arg).Build();
        return self;
    }

    public static SettersContext<T> SemanticHeadingLevel<T>(this SettersContext<T> self, SemanticHeadingLevel semanticHeadingLevel) where T : VisualElement
    {
        self.XamlSetters.Add(new Setter
        {
            Property = SemanticProperties.HeadingLevelProperty,
            Value = semanticHeadingLevel
        });
        return self;
    }

    public static SettersContext<T> SemanticHeadingLevel<T>(this SettersContext<T> self, Func<PropertySettersContext<T, SemanticHeadingLevel>, IPropertySettersBuilder<T, SemanticHeadingLevel>> configure) where T : VisualElement
    {
        var arg = new PropertySettersContext<T, SemanticHeadingLevel>(self.XamlSetters, SemanticProperties.HeadingLevelProperty);
        configure(arg).Build();
        return self;
    }

    public static SemanticHeadingLevel GetSemanticHeadingLevelValue<T>(this T self) where T : VisualElement
    {
        return (SemanticHeadingLevel)self.GetValue(SemanticProperties.HeadingLevelProperty);
    }
    
    public static T OnChildrenReordered<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.ChildrenReordered += handler;
        return self;
    }
    
    public static T OnChildrenReordered<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.ChildrenReordered += (o, arg) => action(self);
        return self;
    }
        
    public static T OnFocused<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Focused += handler;
        return self;
    }
    
    public static T OnFocused<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Focused += (o, arg) => action(self);
        return self;
    }
        
    public static T OnLoaded<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Loaded += handler;
        return self;
    }
    
    public static T OnLoaded<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Loaded += (o, arg) => action(self);
        return self;
    }
        
    public static T OnMeasureInvalidated<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.MeasureInvalidated += handler;
        return self;
    }
    
    public static T OnMeasureInvalidated<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.MeasureInvalidated += (o, arg) => action(self);
        return self;
    }
        
    public static T OnSizeChanged<T>(this T self, System.EventHandler handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SizeChanged += handler;
        return self;
    }
    
    public static T OnSizeChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.SizeChanged += (o, arg) => action(self);
        return self;
    }
        
    public static T OnUnfocused<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.FocusEventArgs> handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Unfocused += handler;
        return self;
    }
    
    public static T OnUnfocused<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Unfocused += (o, arg) => action(self);
        return self;
    }
        
    public static T OnUnloaded<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Unloaded += handler;
        return self;
    }
    
    public static T OnUnloaded<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.VisualElement
    {
        self.Unloaded += (o, arg) => action(self);
        return self;
    }
        
}


