//
// <auto-generated-fmglib-mauimarkup-generator />
//


namespace FmgLib.MauiMarkup;

public static partial class WindowExtension
{
    public static T FlowDirection<T>(this T self,
        Microsoft.Maui.FlowDirection flowDirection)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.FlowDirectionProperty, flowDirection);
        return self;
    }
    
    public static T FlowDirection<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.FlowDirection>, IPropertyBuilder<T, Microsoft.Maui.FlowDirection>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, Microsoft.Maui.FlowDirection>(self, Microsoft.Maui.Controls.Window.FlowDirectionProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> FlowDirection<T>(this SettersContext<T> self,
        Microsoft.Maui.FlowDirection flowDirection)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.FlowDirectionProperty, Value = flowDirection });
        return self;
    }
    
    public static SettersContext<T> FlowDirection<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.FlowDirection>, IPropertySettersBuilder<T, Microsoft.Maui.FlowDirection>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.FlowDirection>(self.XamlSetters, Microsoft.Maui.Controls.Window.FlowDirectionProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Height<T>(this T self,
        double height)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.HeightProperty, height);
        return self;
    }
    
    public static T Height<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.HeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Height<T>(this SettersContext<T> self,
        double height)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.HeightProperty, Value = height });
        return self;
    }
    
    public static SettersContext<T> Height<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.HeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MaximumHeight<T>(this T self,
        double maximumHeight)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.MaximumHeightProperty, maximumHeight);
        return self;
    }
    
    public static T MaximumHeight<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.MaximumHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaximumHeight<T>(this SettersContext<T> self,
        double maximumHeight)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.MaximumHeightProperty, Value = maximumHeight });
        return self;
    }
    
    public static SettersContext<T> MaximumHeight<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.MaximumHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MaximumWidth<T>(this T self,
        double maximumWidth)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.MaximumWidthProperty, maximumWidth);
        return self;
    }
    
    public static T MaximumWidth<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.MaximumWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MaximumWidth<T>(this SettersContext<T> self,
        double maximumWidth)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.MaximumWidthProperty, Value = maximumWidth });
        return self;
    }
    
    public static SettersContext<T> MaximumWidth<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.MaximumWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MinimumHeight<T>(this T self,
        double minimumHeight)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.MinimumHeightProperty, minimumHeight);
        return self;
    }
    
    public static T MinimumHeight<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.MinimumHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MinimumHeight<T>(this SettersContext<T> self,
        double minimumHeight)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.MinimumHeightProperty, Value = minimumHeight });
        return self;
    }
    
    public static SettersContext<T> MinimumHeight<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.MinimumHeightProperty);
        configure(context).Build();
        return self;
    }
    
    public static T MinimumWidth<T>(this T self,
        double minimumWidth)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.MinimumWidthProperty, minimumWidth);
        return self;
    }
    
    public static T MinimumWidth<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.MinimumWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> MinimumWidth<T>(this SettersContext<T> self,
        double minimumWidth)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.MinimumWidthProperty, Value = minimumWidth });
        return self;
    }
    
    public static SettersContext<T> MinimumWidth<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.MinimumWidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Page<T>(this T self,
        Microsoft.Maui.Controls.Page? page)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.PageProperty, page);
        return self;
    }
    
    public static T Page<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.Controls.Page?>, IPropertyBuilder<T, Microsoft.Maui.Controls.Page?>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, Microsoft.Maui.Controls.Page?>(self, Microsoft.Maui.Controls.Window.PageProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Page<T>(this SettersContext<T> self,
        Microsoft.Maui.Controls.Page? page)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.PageProperty, Value = page });
        return self;
    }
    
    public static SettersContext<T> Page<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.Controls.Page?>, IPropertySettersBuilder<T, Microsoft.Maui.Controls.Page?>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.Controls.Page?>(self.XamlSetters, Microsoft.Maui.Controls.Window.PageProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Title<T>(this T self,
        string? title)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.TitleProperty, title);
        return self;
    }
    
    public static T Title<T>(this T self, Func<PropertyContext<T, string?>, IPropertyBuilder<T, string?>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, string?>(self, Microsoft.Maui.Controls.Window.TitleProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Title<T>(this SettersContext<T> self,
        string? title)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.TitleProperty, Value = title });
        return self;
    }
    
    public static SettersContext<T> Title<T>(this SettersContext<T> self, Func<PropertySettersContext<T, string?>, IPropertySettersBuilder<T, string?>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, string?>(self.XamlSetters, Microsoft.Maui.Controls.Window.TitleProperty);
        configure(context).Build();
        return self;
    }
    
    public static T TitleBar<T>(this T self,
        Microsoft.Maui.ITitleBar? titleBar)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.TitleBarProperty, titleBar);
        return self;
    }
    
    public static T TitleBar<T>(this T self, Func<PropertyContext<T, Microsoft.Maui.ITitleBar?>, IPropertyBuilder<T, Microsoft.Maui.ITitleBar?>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, Microsoft.Maui.ITitleBar?>(self, Microsoft.Maui.Controls.Window.TitleBarProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> TitleBar<T>(this SettersContext<T> self,
        Microsoft.Maui.ITitleBar? titleBar)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.TitleBarProperty, Value = titleBar });
        return self;
    }
    
    public static SettersContext<T> TitleBar<T>(this SettersContext<T> self, Func<PropertySettersContext<T, Microsoft.Maui.ITitleBar?>, IPropertySettersBuilder<T, Microsoft.Maui.ITitleBar?>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, Microsoft.Maui.ITitleBar?>(self.XamlSetters, Microsoft.Maui.Controls.Window.TitleBarProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Width<T>(this T self,
        double width)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.WidthProperty, width);
        return self;
    }
    
    public static T Width<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.WidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Width<T>(this SettersContext<T> self,
        double width)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.WidthProperty, Value = width });
        return self;
    }
    
    public static SettersContext<T> Width<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.WidthProperty);
        configure(context).Build();
        return self;
    }
    
    public static T X<T>(this T self,
        double x)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.XProperty, x);
        return self;
    }
    
    public static T X<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.XProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> X<T>(this SettersContext<T> self,
        double x)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.XProperty, Value = x });
        return self;
    }
    
    public static SettersContext<T> X<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.XProperty);
        configure(context).Build();
        return self;
    }
    
    public static T Y<T>(this T self,
        double y)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SetValue(Microsoft.Maui.Controls.Window.YProperty, y);
        return self;
    }
    
    public static T Y<T>(this T self, Func<PropertyContext<T, double>, IPropertyBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertyContext<T, double>(self, Microsoft.Maui.Controls.Window.YProperty);
        configure(context).Build();
        return self;
    }
    
    public static SettersContext<T> Y<T>(this SettersContext<T> self,
        double y)
        where T : Microsoft.Maui.Controls.Window
    {
        self.XamlSetters.Add(new Setter { Property = Microsoft.Maui.Controls.Window.YProperty, Value = y });
        return self;
    }
    
    public static SettersContext<T> Y<T>(this SettersContext<T> self, Func<PropertySettersContext<T, double>, IPropertySettersBuilder<T, double>> configure)
        where T : Microsoft.Maui.Controls.Window
    {
        var context = new PropertySettersContext<T, double>(self.XamlSetters, Microsoft.Maui.Controls.Window.YProperty);
        configure(context).Build();
        return self;
    }
    
    public static T OnActivated<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Activated += handler;
        return self;
    }
    
    public static T OnActivated<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Activated += (o, arg) => action(self);
        return self;
    }
        
    public static T OnBackgrounding<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.BackgroundingEventArgs>? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Backgrounding += handler;
        return self;
    }
    
    public static T OnBackgrounding<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Backgrounding += (o, arg) => action(self);
        return self;
    }
        
    public static T OnCreated<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Created += handler;
        return self;
    }
    
    public static T OnCreated<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Created += (o, arg) => action(self);
        return self;
    }
        
    public static T OnDeactivated<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Deactivated += handler;
        return self;
    }
    
    public static T OnDeactivated<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Deactivated += (o, arg) => action(self);
        return self;
    }
        
    public static T OnDestroying<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Destroying += handler;
        return self;
    }
    
    public static T OnDestroying<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Destroying += (o, arg) => action(self);
        return self;
    }
        
    public static T OnDisplayDensityChanged<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.DisplayDensityChangedEventArgs>? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.DisplayDensityChanged += handler;
        return self;
    }
    
    public static T OnDisplayDensityChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.DisplayDensityChanged += (o, arg) => action(self);
        return self;
    }
        
    public static T OnModalPopped<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPoppedEventArgs>? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPopped += handler;
        return self;
    }
    
    public static T OnModalPopped<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPopped += (o, arg) => action(self);
        return self;
    }
        
    public static T OnModalPopping<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPoppingEventArgs>? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPopping += handler;
        return self;
    }
    
    public static T OnModalPopping<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPopping += (o, arg) => action(self);
        return self;
    }
        
    public static T OnModalPushed<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPushedEventArgs>? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPushed += handler;
        return self;
    }
    
    public static T OnModalPushed<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPushed += (o, arg) => action(self);
        return self;
    }
        
    public static T OnModalPushing<T>(this T self, System.EventHandler<Microsoft.Maui.Controls.ModalPushingEventArgs>? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPushing += handler;
        return self;
    }
    
    public static T OnModalPushing<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.ModalPushing += (o, arg) => action(self);
        return self;
    }
        
    public static T OnPopCanceled<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.PopCanceled += handler;
        return self;
    }
    
    public static T OnPopCanceled<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.PopCanceled += (o, arg) => action(self);
        return self;
    }
        
    public static T OnResumed<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Resumed += handler;
        return self;
    }
    
    public static T OnResumed<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Resumed += (o, arg) => action(self);
        return self;
    }
        
    public static T OnSizeChanged<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SizeChanged += handler;
        return self;
    }
    
    public static T OnSizeChanged<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.SizeChanged += (o, arg) => action(self);
        return self;
    }
        
    public static T OnStopped<T>(this T self, System.EventHandler? handler)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Stopped += handler;
        return self;
    }
    
    public static T OnStopped<T>(this T self, System.Action<T> action)
        where T : Microsoft.Maui.Controls.Window
    {
        self.Stopped += (o, arg) => action(self);
        return self;
    }
        
}


